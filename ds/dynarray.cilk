#include <stdlib.h>
#include <stdio.h>

#include "dynarray.cilkh"

struct dyn_array
{
  data_t* array;
  size_t current_size;
  size_t max_size;
};

#include "dynarray_batch.cilk"

DynamicArray da_create_sized(size_t size)
{
  struct dyn_array* d = malloc(sizeof(struct dyn_array));
  d->array = malloc(sizeof(data_t) * size);
  d->max_size = size;
  d->current_size = 0;
  return d;
}
DynamicArray da_create() { return da_create_sized(DEFAULT_SIZE); }


void da_destroy(DynamicArray this)
{
  free(this->array);
  free(this);
}

data_t da_get_item(DynamicArray this, index_t i)
{
  return this->array[i];
}

size_t da_get_size(DynamicArray this) { return this->current_size; }

cilk void da_resize(DynamicArray this, size_t new_size)
{
  data_t* new_array;
  if (this->max_size >= new_size) return;
  new_array = malloc(sizeof(data_t) * new_size);

  spawn copy(this->array, new_array, this->current_size);
  sync;

  free(this->array);
  this->array = new_array;
  this->max_size = new_size;
}

void da_insert(DynamicArray this, data_t item, size_t pos)
{
  this->array[pos] = item;
}

cilk void da_push_back(DynamicArray this, data_t item)
{
  if (this->current_size + 1 >= this->max_size) {
    spawn da_resize(this, this->max_size * 2);
    sync;
  }
  this->array[this->current_size++] = item;
}

void da_print(DynamicArray this)
{
  size_t i;
  printf("Array at %p with %zu / %zu items.\n", this->array,
         this->current_size, this->max_size);
  for (i = 0; i < this->current_size; ++i) {
    printf("%i ", this->array[i]);
  }
  printf("\n");
}
