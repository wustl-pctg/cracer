#include <limits.h>
#ifdef CILK
#include <cilk-lib.cilkh>
#endif

/* --- *Public Parallel Methods* --- */
#ifdef CILK
// Sequential delete need not return anything because we can do a
// find_min right before. But that would be a race condition in
// parallel code, so we must return the min value when calling par_delete_min.
data_t ph_par_delete_min(CilkWorkerState* const ws,
                         PairingHeap this)
{
  data_t result = 0;
  data_t temp = INT_MAX;
  Cilk_batchify(ws, ph_batch, this, &temp, sizeof(data_t), &result);
  return result;
}

void ph_par_insert(CilkWorkerState* const ws,
                   PairingHeap this, data_t elem)
{
  Cilk_batchify(ws, ph_batch, this, &elem, sizeof(data_t), NULL);
  return;
}
#endif

#define IS_ADD(data) ((data) != INT_MAX)
#define IS_DELETE_MIN(data) ((data) == INT_MAX)

/* --- *Private Parallel Methods --- */
cilk void ph_batch(void* ds, void* data, size_t num_elems, void* res)
{
  PairingHeap h = (PairingHeap)ds;
  data_t* array = (data_t*)data;
  data_t* result = (data_t*)res;
  int i;

  for (i = 0; i < num_elems; ++i) {
    if (IS_ADD(array[i])) ph_insert(h, array[i]);
    else {
      if (result) result[i] = ph_find_min(h);
      ph_delete_min(h);
    }
  }

  /* for (i = 0; i < num_deletes; ++i) { */
  /*   // @todo get correct result index */
  /*   //    if (result) result[??] = ph_find_min(h); */
  /* } */

}
