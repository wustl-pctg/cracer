// Benchmark runs for a Pairing Heap.
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#ifdef CILK
#include <cilk-lib.cilkh>
#endif

#include "common.h"
#include "benchopt.h"
#include "timer.h"
#include "pairheap.cilkh"

#define INIT_SIZE 20

int g_par_threshold = 32;
BenchOptions g_options;
int* g_vals;
int g_num_spots;
PairingHeap g_heap;

void set_up(size_t initial_size, size_t num_ops)
{
  int i;
  int x;
  g_heap = ph_create();

  for (i = 0; i < initial_size; ++i) {
    x = rand();
    ph_insert(g_heap, x);
  }

  g_vals = malloc(sizeof(int) * num_ops * g_num_spots);
  if (!g_vals) fprintf(stderr, "insufficient memory (vals)\n");

  for (i = 0; i < num_ops * g_num_spots; ++i) {
    if (rand() % 2 == 0) g_vals[i] = rand();
    else g_vals[i] = INT_MAX;
  }

  return;
}

cilk void parfor_ph(const int begin, const int end)
{
  int i;

  if (end - begin <= g_par_threshold) {

    for (i = begin; i < end; ++i) {
      if (g_vals[i] == INT_MAX) {
        //        ph_par_delete_min(_cilk_ws, g_heap);
        ph_delete_min(g_heap);
      } else {
        /* ph_par_insert(_cilk_ws, g_heap, g_vals[i]); */
        ph_insert(g_heap, g_vals[i]);
      }
    }

  } else {
    i = begin + (end - begin) / 2;
    spawn parfor_ph(begin, i);
    spawn parfor_ph(i, end);
  }
}

cilk int main(int argc, char* argv[])
{
  size_t num_ops;
  size_t initial_size;
  int i;
  //size_t inserts = 50; // Percentage of ops that will be inserts.

  get_options(argc, argv, &g_options);
  num_ops = g_options.operations;
  initial_size = g_options.initial_size > 0 ? g_options.initial_size : INIT_SIZE;

  // g_num_spots = _cilk_ws->context->Cilk_RO_params->batchvals;
  g_num_spots = 1;

  set_up(initial_size, num_ops);

  timer_start();
  /* spawn parfor_ph(0, num_ops); */
  /* sync; */
  for (i = 0; i < num_ops; ++i) {
    if (g_vals[i] == INT_MAX) ph_delete_min(g_heap);
    else ph_insert(g_heap, g_vals[i]);
  }
  timer_stop();

  printf("%lf\n", timer_get_wall_time());

  return 0;
}
