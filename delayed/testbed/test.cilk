// Simple correctness tests for Delayed-Start Batcher.
#include <stdio.h>

#include <cilk-lib.cilkh>

unsigned int g_total_writes = 0;
Cilk_lockvar g_lock_total;

void ds_work(int writes) {
	//does a number of writes/moves some registers back and forth
	int j, k;
	for (j=0; j < writes; j++){
		__asm__ __volatile("movl %1, %%eax;\n\t addl $5, %%eax;\n\t movl %%eax, %0;":"=r"(k):"r"(j):"%eax");
	}
  Cilk_lock(g_lock_total);
  g_total_writes += writes;
  Cilk_unlock(g_lock_total);
}

cilk void work_function(int index, void* writes)
{
	int* works = (int*) writes;
	ds_work(works[index]);
}

cilk void batch_function(void* ds, void *input, size_t size, void* useless)
{
	int i;

  for (i = 0; i < size; i++) {
    ds_work(((int*)input)[i]);
  }

  /* spawn parforpar(0,size-1,1,&work_function,(int*)input); */
  /* sync; */
}

cilk void work_batch(int i, void* work)
{
	i = *(int*) work;
	Cilk_batchify(_cilk_ws, batch_function, NULL, &i, sizeof(int), NULL);
}

cilk int main(int argc, char* argv[])
{
  spawn parforpar(0, num_ops, 1, &work_batch, (void*) &op_work);
  sync;

  printf("Num total writes: %u\n", g_total_writes);
}
