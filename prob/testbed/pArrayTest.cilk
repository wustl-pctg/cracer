#include "packedMemoryArray.cilk"

#define SIZE 32
#define TSIZE 20
cilk int main() {
    int i;
    int j;
    int k;
    char x,y,z;
    pArray* array = pArray_create(SIZE*2);
    pItem** items = calloc(SIZE*2,sizeof(pItem*));
    pItem* testItem;
    pItem* comp;
    pItem* batch[TSIZE][2];
    x='x';
    y='y';
    z='z';
    for (i=0;i<SIZE*2;i++){
        items[i] = pItem_create(&x);
    }
    for (i=0;i<20;i++){
       pArray_seqInsert(array,NULL,items[i]);
    }
    
    items[5]->item=&z;
    for (i=0;i<TSIZE;i++){
      items[20+i]->item=&y;
      batch[i][0]=items[i];
      batch[i][1]=items[20+i];
    }
    /*    for (i=6;i<50;i++){
        //printf("insertion %d\n",i);
        pArray_seqInsert(array,items[0],items[i]);
        items[i]->item=&y;
    }
    /*
    for (k=0;k<SIZE;k++){
    
        i = rand()%SIZE;
        j = rand()%SIZE;
        if (i!=j){
            testItem=pArray_order(items[i],items[j]);
            /*if (i<k){
                comp=items[i];
            }else {
                comp=items[j];
            }
            if (testItem!=comp){
                printf("Order doesn't work between some item!\n");
            }   */
       // }
    //}*/
    /*
    for (i=0;i<5;i++){
      batch[i][0]=items[20+i];
      batch[i][1]=items[50+i];
      //     printf("stuff %p,%p \n",batch[i][0],batch[i][1]);
      //      printf("in size: %d\n",sizeof(batch[i][0]));
      }*/
    spawn  pArray_batchInsert(array, batch, TSIZE*2, NULL);
    sync;

    pArray_print(array);
    //pArray_destroy(array);
}
