#include <getopt.h>
#include "OM_sleator.cilk"
#include "util/timer.h"

//THERE IS A STRANGE RUNTIME ERROR WITH MALLOC THAT I COULDNT FIGURE OUT HOW TO FIX
	//BECAUSE OF THAT, THIS IS UNTESTED SINCE I ADDED LOCKS


void usage() {
  printf("use default arguments");
}

cilk int main(int argc, char **argv)
{
	OM* test_OM = create_OM();
	int base_int = -1;
	subrecord* base = create_subrecord(&base_int);
	int* int_data;
	subrecord** existing_array;
	subrecord** insert_array;
	int i;
	
	int test_size = 10;
	int verbose = 0;
	int option;
	int opt_index;

	struct option all_options[] ={
     {"size",required_argument,0,'s'},
     {"verbose", no_argument,0,'v'}
    };
	
	
	
	//---------Set Up Command Line Arguements---------------------
	while((option = getopt_long(argc,argv,"s:v",all_options,&opt_index))!=-1){
     
	switch(option){
      case 0:
		if (all_options[opt_index].flag!=0){
		  break;
		}
		else{
		  printf("Invalid option.\n");
		  break;
		}
      case 's':
	test_size=atoi(optarg);
	break;
      case 'v':
	verbose=1;
	break;
      default:
	usage();
	return -1;
      }
    }


	//--------Initialize Arrays--------------
	
	int_data = malloc(sizeof(int) * test_size);
	existing_array = malloc(sizeof(subrecord*) * test_size);
	insert_array = malloc(sizeof(subrecord*) * test_size);
	
	for(i=0; i<test_size; ++i)
	{
		int_data[i] = i;
		existing_array[i] = create_subrecord(&int_data[i]);
		insert_array[i] = create_subrecord(&int_data[i]);
	}
	
	//---------Insert "Existing" items-----------
	insert(test_OM, NULL, base);
	for(i=0; i<test_size; ++i)
	{
		insert(test_OM, base, existing_array[i]);
	}
	
	
	
	//----------TEST------------
	if(verbose)
	{
		printf("Begin Test\n");
	}
	
	startTimer();
	for(i=0; i<test_size; ++i)
	{
		insert(test_OM, existing_array[i], insert_array[i]);
	}
	stopTimer();
	
	if(verbose)
	{
		printf("Batch\tsize: %d\n", test_size);
	}
	printf("%lf\n", getWallTime());
	
	return 0;
}
