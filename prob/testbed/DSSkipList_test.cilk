
#include "util/timer.h"
#include "util/benchOptions.h"
#include "util/parfor.cilkh"
#include "ds/DSSkipList.cilkh"

#define TSIZE 20
int parThreshold;

DSSkipList* setUp(){
     DSSkipList* ds = new_DSSkipList();
     return ds;
}

cilk void makeInsert(int i, void* data){
    DSSkipList* ds = data;
    boolean ret;
    ret=spawn DSSkipList_add(ds,0,i);
    sync;
}
/*
cilk void makeRemove(int i, void* data){
    DSSkipList* ds = data;
    spawn DSSkipList_remove(ds,i);
    sync;
}*/

cilk void runAddTest(DSSkipList* ds, int size){
     spawn parforpar(0,size-1,1,&makeInsert, ds);
     sync;
}
/*
cilk void runRemoveTest(Stack* ds, int size){
     spawn parforpar(0,size-1,1,&makeRemove, ds);
     sync;
     }*/
/*
cilk void runMixedTest(DSSkipList* ds, int size, int add_part){
  int threshold = parThreshold?parThreshold:PARFOR_THRESHOLD;
  int add_size = (add_part * size)/100;
  spawn parforpar_thresh(0,add_size,1,threshold,&mixedInsert,ds);
  spawn parforpar_thresh(0,size-add_size,1,threshold,&mixedRemove,ds);
  sync;
}*/

cilk int main(int argc, char* argv[]){
    DSSkipList* test_ds = setUp();
    BenchOptions options;
    int testSize;
 
    getOptions(argc, argv, &options);
    testSize=options.operations;
    startTimer();
    spawn runAddTest(test_ds,testSize);
    sync;
    stopTimer();
    if (options.verbose){
      printf("Batch Add. Size %d. \n", testSize);
    }
    printf("%lf\n",getWallTime());
    return 0;
}
