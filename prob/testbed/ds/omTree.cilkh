#ifndef _OMTREE_CILKH
#define _OMTREE_CILKH

#define VOID_DATA (int)-INFINITY
#define PARALLEL_CUTOFF 100
#define N 32	//N = Initial Label space; Power of 2
#define M 100000 //Max possible indirection labelspace

//Tyler Romero
//Binary Tree OM Structure, no layer of indirection yet
//Has a leaf for every possible label
//Will eventually support multiple insertions in parallel

//NEED TO FINISH ADDING LAYER OF INDIRECTION

//NEED TO MAKE THAT ONE SECTION OF THE PROGRAM RECURSIVE
//NEED TO ADD DEFAULTS HEADER AND FIGURE OUT HOW THAT WORKS
//NEED TO ADD MULTI ORDER FUNCTION

//----------------
//Change test and compile with locks





//----Structs-----------------------
enum bool{false,true};

struct datastructOM
{
	struct nodeOM* root;
	int countOM;	//Number of leafs
	int count;		//Number of itemOMs
	int size;		//Number of indirection_items
	Cilk_lockvar lock;
};
typedef struct datastructOM OM;

struct nodeOM
{
	struct nodeOM *right, *left;
	int height;	//Height 0 = leaf
	int count; //Number of itemOMs below this node, max is 2^height
	struct nodeOM *parent;	//NULL if the node is the root
	struct itemOM* item;	//Only leafs will not be NULL
	enum bool is_marked;
	enum bool root_split;
};
typedef struct nodeOM nodeOM;

struct itemOM
{
	struct itemOM *next, *prev;
	struct nodeOM *parent;
	int label;
	struct indirection_item* sublist;
	int count;
	void* data;
	Cilk_lockvar lock;
};
typedef struct itemOM itemOM;

struct indirection_item
{
	int label;
	struct indirection_item *prev, *next;
	void* data;
	itemOM* parent;
	enum bool is_base;
};
typedef struct indirection_item indirection_item;

struct item_pair
{
	itemOM* itemA;	//Existing
	itemOM* itemB;	//Insert
};

struct indirection_pair
{
	indirection_item *itemA, *itemB;
};
typedef struct indirection_pair indirection_pair;

//----Declarations---------------------
	//PUBLIC FUNCTIONS
cilk void parallel_for_batch_insert(OM* current_OM, struct item_pair** inserts, int start, int end);
cilk void lock_insert(OM* current_OM, itemOM* existing_item, itemOM* insert_item);	
void print_OM(OM* current_OM, int is_tree);
cilk OM* create_OM(indirection_item* first_item);		//Initialization
indirection_item* create_indirection_item(void* data);	//Initialization



	//Batch Item Operations
cilk void batch_insert(OM* current_OM, void* inserts_void, size_t insert_count, void* results);
cilk void batch_insert_iterator(OM* current_OM, struct item_pair** inserts, int i);

	//Batch Function Helpers
cilk void parallel_for_divide_inserts(struct item_pair** inserts, itemOM** existing_array, itemOM** insert_array, int start, int end);
cilk void divide_inserts(struct item_pair** inserts, itemOM** existing_array, itemOM** insert_array, int i);
cilk void parallel_for_find_and_mark_low_density(itemOM** insert_array, int start, int end);
cilk void recursive_find_and_mark_low_density(nodeOM* current_node, double threshold, double T);
cilk void recursive_fix_overflows(OM* current_OM, nodeOM* current_node);
cilk void recursive_reinsert(nodeOM* current_node, itemOM** item_array, int size, int label);
cilk void parallel_for_search_insert_and_update(nodeOM* root, itemOM** insert_array, int start, int end);
cilk void search_insert_and_update(nodeOM* root, itemOM* insert_item);
cilk void parallel_for_list_insert_and_label(OM* current_OM, itemOM** existing_array, itemOM** insert_array, int start, int end);
cilk void list_insert_and_label(OM* current_OM, itemOM* existing_item, itemOM* insert_item);

	//Individual Item Operations
enum bool individual_order(itemOM* itemA, itemOM* itemB);	//O(1)

	//Individual Function Helpers
cilk void recursive_relabel(nodeOM* current_node, itemOM** item_array, int size, int label);	//O(logn)
nodeOM* recursive_find_low_density(nodeOM* current_node, double theshold, double T);	//Worst Case: O(logn)Parallelization not needed
nodeOM* recursive_search_and_update_tree(nodeOM* current_node, int key, int sum);		//O(logn)Parallelization not needed
double density(nodeOM* current_node);

	//Initializations
cilk nodeOM* recursive_create_tree(nodeOM* root, int height, int is_return);	//O(logn)
indirection_pair* create_indirection_pair(indirection_item* itemA, indirection_item* itemB);
struct item_pair* create_item_pair(itemOM* itemA, itemOM* itemB);
nodeOM* create_nodeOM();
itemOM* create_itemOM();

	//Print
void recursive_print_OM(nodeOM* current_node, int label, int count, int is_tree);

#endif
