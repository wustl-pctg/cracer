#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <cilk-lib.cilkh>

#define VOID_DATA (int)-INFINITY
#define PARALLEL_CUTOFF 100
#define M 32	//M = Initial Label space; Power of 2

//Tyler Romero
//Binary Tree OM Structure, no layer of indirection yet
//Has a leaf for every possible label
//Will eventually support multiple insertions in parallel

//NEED TO ADD LAYER OF INDIRECTION
//NEED TO MAKE THAT ONE SECTION OF THE PROGRAM RECURSIVE
//NEED TO ADD DEFAULTS HEADER AND FIGURE OUT HOW THAT WORKS
//NEED TO ADD MULTI ORDER FUNCTION

//----Structs-----------------------
enum bool{false,true};

struct nodeOM
{
	struct nodeOM *right, *left;
	int height;	//Height 0 = leaf
	int count; //Number of itemOMs below this node, max is 2^height
	struct nodeOM *parent;	//NULL if the node is the root
	struct itemOM* item;	//Only leafs will not be NULL
	enum bool is_marked;
	enum bool root_split;
};
typedef struct nodeOM nodeOM;

struct itemOM
{
	struct itemOM *next, *prev;
	struct nodeOM *parent;
	int label;
	void* data;
};
typedef struct itemOM itemOM;

struct datastructOM
{
	struct nodeOM* root;
	int countOM;	//Number of leafs
	int count;
	Cilk_lockvar lock;
};
typedef struct datastructOM OM;

struct item_pair
{
	itemOM* itemA;	//Existing
	itemOM* itemB;	//Insert
};

//----Declarations---------------------
	//PUBLIC FUNCTIONS
cilk void parallel_for_batch_insert(OM* current_OM, struct item_pair** inserts, int start, int end);
cilk void lock_insert(OM* current_OM, itemOM* existing_item, itemOM* insert_item);	
void print_OM(OM* current_OM, int is_tree);
cilk OM* create_OM(itemOM* first_item);		//Initialization
itemOM* create_itemOM(void* data);	//Initialization
	
	
	//Batch Item Operations
cilk void batch_insert(OM* current_OM, void* inserts_void, size_t insert_count, void* results);
cilk void batch_insert_iterator(OM* current_OM, struct item_pair** inserts, int i);

	//Batch Function Helpers
cilk void parallel_for_divide_inserts(struct item_pair** inserts, itemOM** existing_array, itemOM** insert_array, int start, int end);
cilk void divide_inserts(struct item_pair** inserts, itemOM** existing_array, itemOM** insert_array, int i);
cilk void parallel_for_find_and_mark_low_density(itemOM** insert_array, int start, int end);
cilk void recursive_find_and_mark_low_density(nodeOM* current_node, double threshold, double T);
cilk void recursive_fix_overflows(OM* current_OM, nodeOM* current_node);
cilk void recursive_reinsert(nodeOM* current_node, itemOM** item_array, int size, int label);
cilk void parallel_for_search_insert_and_update(nodeOM* root, itemOM** insert_array, int start, int end);
cilk void search_insert_and_update(nodeOM* root, itemOM* insert_item);
cilk void parallel_for_list_insert_and_label(OM* current_OM, itemOM** existing_array, itemOM** insert_array, int start, int end);
cilk void list_insert_and_label(OM* current_OM, itemOM* existing_item, itemOM* insert_item);
	
	//Individual Item Operations
	//O(logn)??? With Indirection could be Amortized O(1)???
enum bool individual_order(itemOM* itemA, itemOM* itemB);	//O(1)

	//Individual Function Helpers
cilk void recursive_relabel(nodeOM* current_node, itemOM** item_array, int size, int label);	//O(logn)
nodeOM* recursive_find_low_density(nodeOM* current_node, double theshold, double T);	//Worst Case: O(logn)Parallelization not needed
nodeOM* recursive_search_and_update_tree(nodeOM* current_node, int key, int sum);		//O(logn)Parallelization not needed
double density(nodeOM* current_node);	//O(1)

	//Initializations
cilk nodeOM* recursive_create_tree(nodeOM* root, int height, int is_return);	//O(logn)
struct item_pair* create_item_pair(itemOM* itemA, itemOM* itemB);
nodeOM* create_nodeOM();	//O(1)

	//Print
void recursive_print_OM(nodeOM* current_node, int label, int count, int is_tree);


//-------------------------------------------------
//----------Multiple Insert-----------------------
//--------------------------------------------------
	//Density Finder Changes slightly,
		//Multiple relabeling operations in parallel
	//Takes in an OM Structure, an array of insert pairs, and the size of that array
		//How to do insert pairs??? One array with structs or two arrays? Or, an array[size] of arrays[2] of pairs?
cilk void batch_insert(OM* current_OM, void* inserts_void, size_t insert_count, void* results)
{
	itemOM** existing_array = (itemOM**)malloc(sizeof(itemOM*) * insert_count);
	itemOM** insert_array = (itemOM**)malloc(sizeof(itemOM*) * insert_count);
	struct item_pair** inserts = (struct item_pair**)inserts_void;
	
	if(insert_count > current_OM->count)	//A very basic check for maximum number of inserts
	{
		printf("Too many items are being inserted\n");
		return;
	}
	//printf("Insert count: %d\n", insert_count);
	//printf("\tDivide inserts\n");
	spawn parallel_for_divide_inserts(inserts, existing_array, insert_array, 0, insert_count);	//This system is not optimal
	sync;

	//printf("\tList insert and label\n");
	//Insert things into linked list and label them (at the same time)
	spawn parallel_for_list_insert_and_label(current_OM, existing_array,insert_array, 0, insert_count);
	sync;
	current_OM->count += insert_count;
	
	//Insert into tree
	//printf("\tInsert into tree\n");
	spawn parallel_for_search_insert_and_update(current_OM->root, insert_array, 0, insert_count);
	sync;

	//Relabel smallest enclosing range that is not overflowing
		//Mark first nodes that arent overflowing
	//printf("\tfind and mark low density\n");
	spawn parallel_for_find_and_mark_low_density(insert_array, 0, insert_count);
	sync;
		//Find the highest up nodes that are marked, generate arrays, reinsert, and relabel
	//printf("\tFix overflows\n");
	spawn recursive_fix_overflows(current_OM, current_OM->root);
	sync;
	//printf("\tFree arrays\n");
	free(insert_array);
	free(existing_array);
	Cilk_terminate_batch(_cilk_ws);
	//printf("Batch terminated\n");
	return;
}

cilk void parallel_for_batch_insert(OM* current_OM, struct item_pair** inserts, int start, int end)
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn batch_insert_iterator(current_OM, inserts, start);
		}
	}
	else
	{
		spawn parallel_for_batch_insert(current_OM, inserts, start, middle);
		spawn parallel_for_batch_insert(current_OM, inserts, middle+1, end);
		spawn batch_insert_iterator(current_OM, inserts, middle);
	}
}

cilk void batch_insert_iterator(OM* current_OM, struct item_pair** inserts, int i)
{
	//printf("i: %d\n",i);
	Cilk_batchify(_cilk_ws, batch_insert, current_OM, &(inserts[i]), sizeof(struct item_pair*), NULL);
}




//- - - - - - - - - - - - - 
cilk void parallel_for_divide_inserts(struct item_pair** inserts, itemOM** existing_array, itemOM** insert_array, int start, int end)
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn divide_inserts(inserts, existing_array, insert_array, start);
		}
	}
	else
	{
		spawn parallel_for_divide_inserts(inserts, existing_array, insert_array, start, middle);
		spawn parallel_for_divide_inserts(inserts, existing_array, insert_array, middle+1, end);
		spawn divide_inserts(inserts, existing_array, insert_array, middle);
	}
}

cilk void divide_inserts(struct item_pair** inserts, itemOM** existing_array, itemOM** insert_array, int i)
{
	existing_array[i] = inserts[i]->itemA;
	insert_array[i] = inserts[i]->itemB;
}

//- - - - - - - - - - - - -



//- - - - - - - - - - - - - - - -
//THIS IS THE COMPLICATED PART
cilk void parallel_for_find_and_mark_low_density(itemOM** insert_array, int start, int end)
{
	double T = 1.15;		//1.3 works, but for some reason they dont all work
	int middle = start+(end-start)/2;
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn recursive_find_and_mark_low_density(insert_array[start]->parent, 1.0, T);
		}
	}
	else
	{
		spawn parallel_for_find_and_mark_low_density(insert_array,start,middle);
		spawn parallel_for_find_and_mark_low_density(insert_array,middle+1,end);
		spawn recursive_find_and_mark_low_density(insert_array[middle]->parent, 1.0, T);
	}
}

cilk void recursive_find_and_mark_low_density(nodeOM* current_node, double threshold, double T)
{
	if(current_node == NULL)
	{
		printf("Current Node is NULL\n");
		return;
	}
	
	if(current_node->height == 0)
		threshold = 1.0;
	else
		threshold = threshold/T;
	
	if(density(current_node) > threshold || density(current_node) > 0.5)	//if it is in overflow, move up and try again
	{
		//printf("\t-Height: %d\tDensity: %f\tThreshold: %f\t(Overflow)\n",current_node->height, density(current_node), threshold);
		if(current_node->parent == NULL)	//Root overflowed
		{
			//printf("\tROOT OVERFLOWED!!!\n");
			current_node->root_split = true;
			return;
		}
		else spawn recursive_find_and_mark_low_density(current_node->parent, threshold, T);
	}
	else	//If it is not in overflow, mark it
	{
		//printf("\t-Height: %d\tDensity: %f\tThreshold: %f\t\n",current_node->height, density(current_node), threshold);
		current_node->is_marked = true;
		return;
	}
}

cilk void recursive_fix_overflows(OM* current_OM, nodeOM* current_node)
{
	itemOM** item_array;
	nodeOM* temp;
	itemOM* temp_item;
	nodeOM* cilk_throwaway;
	int i;
	
	if(current_node == NULL);
	else if(current_node->root_split == true)//Root Split --> BASE CASE
	{
		//printf("\t\t\t-Root Split - shouldnt happen if root didnt overflow\n");
		current_node->root_split == false;
		temp = create_nodeOM();
		temp->right = create_nodeOM();
		temp->left = current_OM->root;
		current_OM->root = temp;
		temp->right->height = temp->left->height;
		temp->height = temp->left->height + 1;
		temp->left->parent = temp;
		temp->right->parent = temp;
		temp->count = temp->left->count;
		temp->is_marked = true;
		cilk_throwaway = spawn recursive_create_tree(temp->right,temp->right->height,0);
		sync;
		current_OM->countOM = current_OM->countOM * 2;
		spawn recursive_fix_overflows(current_OM, current_OM->root);
	}
	else
	{
		if(current_node->is_marked == true)	//Relabel everything under this node
		{
			//printf("\t-Relabel\n");
			//generate array and reinsert
			item_array = (itemOM**)malloc(sizeof(itemOM*) * current_node->count);
			temp = current_node->left;
			while(temp->height != 0)
				temp = temp->left;
			temp_item = temp->item;
			//printf("\t-strip from old list\n");
			for(i=0; i<current_node->count; ++i)	//COULD BE BAD TIME WISE, MAYBE COULD BE DONE BETTER WITH RECURSION???
			{
				item_array[i] = temp_item;
				temp_item->parent->item = NULL;	//Strip items from tree
				temp_item->parent = NULL;
				temp_item = temp_item->next;
			}
			//printf("\t-Reinsert\n");
			spawn recursive_reinsert(current_node, item_array, current_node->count, item_array[0]->label);
			sync;
			free(item_array);
		}
		else	//Search right and left for a marked node
		{
			//printf("\t-Search left and right\n");
			spawn recursive_fix_overflows(current_OM, current_node->right);
			spawn recursive_fix_overflows(current_OM, current_node->left);
		}
	}
}

cilk void recursive_reinsert(nodeOM* current_node, itemOM** item_array, int size, int label)
{
	if(size>1 && current_node->height != 0)	//Multiple items, split
	{
		current_node->count = size;
		current_node->is_marked = false;
		current_node->root_split = false;
		spawn recursive_reinsert(current_node->left, item_array, size/2, label);
		spawn recursive_reinsert(current_node->right, &item_array[size/2], size-floor(size/2), label+pow(2,current_node->height-1));
	}
	else if(current_node->height != 0 && size==1)//Move individual item dow left path
	{
		current_node->count = size;
		current_node->root_split = false;
		current_node->is_marked = false;
		spawn recursive_reinsert(current_node->left, &item_array[0], size, label);
		spawn recursive_reinsert(current_node->right, NULL, 0, 0);
	}
	else if(size == 0 && current_node->height != 0)
	{
		current_node->count = 0;
		current_node->root_split = false;
		current_node->is_marked = false;
		spawn recursive_reinsert(current_node->left, NULL, 0, 0);
		spawn recursive_reinsert(current_node->right, NULL, 0, 0);
	}
	else if(size == 0 && current_node->height == 0)
	{
		current_node->count = size;
		current_node->is_marked = false;
		current_node->root_split = false;
	}
	else if(current_node->height == 0 && size != 1)
	{
		printf("Something was wrong with Tyler's math\n");
	}
	else	//Height should == 0, size should == 1
	{
		current_node->count = size;
		current_node->root_split = false;
		current_node->item = item_array[0];
		if(current_node->item != NULL)
		{
			current_node->item->label = label;
			current_node->item->parent = current_node;
			//printf("Current_node->item->parent: %p\n", current_node->item->parent);
		}
		else printf("Item is null somehow\n");
	}
}

//- - - - - - - - - - - - - - - -


//- - - - - - - - - - - - - - - -  
cilk void parallel_for_search_insert_and_update(nodeOM* root, itemOM** insert_array, int start, int end)
{
	int middle = start+(end-start)/2;
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn search_insert_and_update(root,insert_array[start]);
		}
	}
	else
	{
		spawn parallel_for_search_insert_and_update(root,insert_array,start,middle);
		spawn parallel_for_search_insert_and_update(root,insert_array,middle+1,end);
		spawn search_insert_and_update(root,insert_array[middle]);
	}
}

cilk void search_insert_and_update(nodeOM* root, itemOM* insert_item)
{
	nodeOM* temp;
	//search and update
	temp = recursive_search_and_update_tree(root, insert_item->label, 0);
	//insert
	temp->item = insert_item;
	insert_item->parent = temp;
}
//- - - - - - - - - - - - - - - - - - -



//- - - - - - - - - - - - - - - - - - - - - - - - 
cilk void parallel_for_list_insert_and_label(OM* current_OM, itemOM** existing_array, itemOM** insert_array, int start, int end)	//NEED TO ACTUALLY PARALLELIZE
{
	int middle = start+(end-start)/2;
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn list_insert_and_label(current_OM, existing_array[start],insert_array[start]);
		}
	}
	else
	{
		spawn parallel_for_list_insert_and_label(current_OM, existing_array,insert_array,start,middle);
		spawn parallel_for_list_insert_and_label(current_OM, existing_array,insert_array,middle+1,end);
		spawn list_insert_and_label(current_OM, existing_array[middle],insert_array[middle]);
	}
}

cilk void list_insert_and_label(OM* current_OM, itemOM* existing_item, itemOM* insert_item)
{
	//insert
	insert_item->next = existing_item->next;
	existing_item->next = insert_item;
	insert_item->prev = existing_item;
	insert_item->next->prev = insert_item;
	//label
	//printf("Test\n");
	if(insert_item->next == existing_item)	//If one item is in the list
	{
		insert_item->label = floor((M+existing_item->label)/2);	//Should always be just M/2
	}
	else if(insert_item->next->label == 0)
	{
		//printf("CountOM: %d\n", current_OM->countOM);
		insert_item->label = floor((current_OM->countOM + existing_item->label)/2);
		//printf("label: %d\n", insert_item->label);
	}
	else if(existing_item->label == current_OM->countOM-1)	//If existing item is the last item in the label space
	{
		printf("\t-Tyler's math is probably wrong");
	}
	else									//A normal insertion
	{
		insert_item->label = floor((insert_item->next->label+insert_item->prev->label)/2);
	}
}
//- - - - - - - - - - - - - - - - - - - - - - - - -




//-----------------------------------------------------------------
//-------Lock insert-----------------------------------------
//-------------------------------------------------------------------
//NEED TO CONFIRM PARALLIZATION and NEED TO CONFIRM Big O TIME
cilk void lock_insert(OM* current_OM, itemOM* existing_item, itemOM* insert_item)
{
	nodeOM *temp, *temp_child;
	nodeOM *cilk_throwaway;
	itemOM* temp_item;
	itemOM** item_array;
	int i;
	
	Cilk_lock(current_OM->lock);
	
	//Insert into linked list
	//printf("insert into list\n");
	insert_item->prev = existing_item;
	insert_item->next = existing_item->next;
	existing_item->next = insert_item;
	insert_item->next->prev = insert_item;
	current_OM->count++;
	
	//Give it a label
	//printf("label\n");
	if(insert_item->next == existing_item)	//If there is only one existing item in the list
	{
		//printf("\t-Only one existing item in the list\n");
		insert_item->label = floor((M+existing_item->label)/2);	//Should always be just M/2
	}
	else if(existing_item->label == current_OM->countOM-1)	//If existing item is the last item in the label space
	{
		printf("\t-Tyler's math is probably wrong");
	}
	else									//A normal insertion
	{
		//printf("\t-A normal insertion\n");
		insert_item->label = floor((insert_item->next->label+insert_item->prev->label)/2);
	}
	
	//Insert into tree (Is this efficient enough???)
	//printf("Put in tree\n");
	//printf("\t-insert item label: %d\n", insert_item->label);
	temp = recursive_search_and_update_tree(current_OM->root, insert_item->label,0);	//O(log(M))
	temp->item = insert_item;
	insert_item->parent = temp;

	//Relabel the smallest enclosing range that is not overflowing
	//printf("Relabel smallest range that is not overflowing\n");
	temp = recursive_find_low_density(insert_item->parent, 1.0, 1.2);	//INFO ABOUT T: 2>T>=1, lower numbers relabel more often?, higher numbers relabel a greater number of items
	if(temp == NULL)	//Base case, root is overflowing
	{
		//printf("\t-ROOT OVERFLOWED - Base Case\n");
		//Double size of tree by adding a node on top of root
		temp = create_nodeOM();
		temp->right = create_nodeOM();
		temp->left = current_OM->root;
		current_OM->root = temp;
		current_OM->countOM *= 2;
		temp->right->height = temp->left->height;
		temp->height = temp->left->height + 1;
		temp->left->parent = temp;
		temp->right->parent = temp;
		temp->count = temp->left->count;
		//Build right side of tree
		cilk_throwaway = spawn recursive_create_tree(temp->right,temp->right->height, 0);
		sync;
		//Hypothetically, density should be low enough now
	}
	//printf("\t-Create item array\n");
	item_array = (itemOM**)malloc(temp->count*sizeof(itemOM*));	//Initialize array
	temp_child = temp->left;
	while(temp_child->height != 0 )	//O(logn) //Find first item for array
		temp_child = temp_child->left;
	temp_item = temp_child->item;
	for(i=0; i<temp->count; ++i)	//Ave: better than O(n), Worst Case: O(n)	//THIS COULD BE BAD, TIME WISE!!!
	{								//THIS COULD POSSILBY BE DONE BETTER WITH RECURSION
		item_array[i] = temp_item;
		temp_item->parent->item = NULL;	//Strip items from the tree
		temp_item->parent = NULL;
		temp_item = temp_item->next;
	}
	//printf("\t-Reinsert and relabel\n");
	//printf("\t\t-Size: %d\n", temp->count);
	spawn recursive_relabel(temp, item_array, temp->count, item_array[0]->label);	//Reinsert and relabel items
	sync;
	free(item_array);
	//printf("Done inserting\n");
	Cilk_unlock(current_OM->lock);
}


cilk void parallel_for_lock_insert(OM* current_OM, itemOM** existing_array, itemOM** insert_array, int start, int end)
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end; ++start)
		{
			spawn lock_insert(current_OM, existing_array[start], insert_array[start]);
		}
	}
	else
	{
		spawn parallel_for_lock_insert(current_OM, existing_array, insert_array, start, middle);
		spawn parallel_for_lock_insert(current_OM, existing_array, insert_array, middle+1, end);
		spawn lock_insert(current_OM, existing_array[middle], insert_array[middle]);
	}
}




cilk void recursive_relabel(nodeOM* current_node, itemOM** item_array, int size, int label)	//O(log(M))
{
	int i;

	/*for(i=0; i<size; ++i)
	{
		if(i==0)
			printf("\t\t\t-item_array:\n");
		printf("\t\t\t\t-Address: %p\n", item_array[i]);
	}*/
	if(size>1 && current_node->height != 0)	//Multiple items, split
	{
		current_node->count = size;
		//printf("\t\t-Size greater than one and not a leaf ---> split, move down left and right\n");
		spawn recursive_relabel(current_node->left, item_array, size/2, label);
		spawn recursive_relabel(current_node->right, &item_array[size/2], size-floor(size/2), label+pow(2,current_node->height-1));
		return;
	}
	else if(current_node->height != 0 && size == 1)	//Move individual item down left path
	{
		current_node->count  = size;
		//printf("\t\t-Size == 1 and not a leaf ---> move down left\n");
		spawn recursive_relabel(current_node->left, item_array, size, label);
		spawn recursive_relabel(current_node->right, NULL, 0, 0);
		return;
	}
	else if(size == 0 && current_node->height != 0)	//No items, Reset counts above leafs
	{
		current_node->count = 0;
		spawn recursive_relabel(current_node->left, NULL, 0, 0);
		spawn recursive_relabel(current_node->right, NULL, 0, 0);
		return;
	}
	else if(size == 0 && current_node->height == 0)	//No items, Reset counts at leafs
	{
		current_node->count = 0;
		return;
	}
	else if(current_node->height == 0 && size != 1)
	{
		//printf("\t\t-Something was wrong with Tyler's math");
		return;
	}
	else	//Height should = 0, size should == 1
	{
		current_node->count = size;
		//printf("\t\t-At leaf height\n");
		current_node->item = item_array[0];
		//printf("\t\t\t-Address: %p\n",item_array[0]);
		if(current_node->item != NULL)
		{
			//printf("\t\t\t-label\n");
			current_node->item->label = label;
			//printf("\t\t\t-Set new parent\n");
			current_node->item->parent = current_node;
		}
		else printf("\t\t\t-NULL");
		return;
	}
}

nodeOM* recursive_find_low_density(nodeOM* current_node, double threshold, double T) //O(log2(M)) worst case	//Not parallel
{
	if(current_node->height == 0)
		threshold = 1.0;
	else
		threshold = threshold/T;
	
	if(current_node->parent == NULL)
		return NULL;
	else if(density(current_node) >= threshold || density(current_node) > 0.5)	//If it is in overflow, move up the tree and try again
	{
		//printf("\t-Height: %d\tDensity: %f\tthreshold: %f (Overflow)\n",current_node->height,density(current_node),threshold);
		return recursive_find_low_density(current_node->parent, threshold, T);
	}
	else	//It is not in overflow, relabel below
	{
		//printf("\t-Height: %d\tDensity: %f\tthreshold: %f\n", current_node->height,density(current_node),threshold);
		return current_node;
	}
}

nodeOM* recursive_search_and_update_tree(nodeOM* current_node, int key, int sum)	//O(log2(M))	//Not parallel
{
	current_node->count++;
	if(current_node->height==0)
		return current_node;
	
	if(pow(2,current_node->height-1)+sum > key)	//Search left
		return recursive_search_and_update_tree(current_node->left,key,sum);
	else						//Search right
		return recursive_search_and_update_tree(current_node->right,key,sum+pow(2,current_node->height-1));
}

//--------individual order----------------------
//NEED TO TEST THIS, its really simple though
enum bool individual_order(itemOM* itemA, itemOM* itemB)	//True if itemA is earlier in the list than itemB
{
	if(itemA->label == itemB->label)
	{
		printf("Error: Input items must be distinct items from the same data structure\n");
		return false;
	}
	else if(itemA->label < itemB->label) return true;
	else return false;
}


//-----Other-----------
double density(nodeOM* current_node)
{
	return (double)((double)current_node->count)/((double)pow(2,current_node->height));	//Might have over-cast this
}

//----Initializations--------
cilk OM* create_OM(itemOM* first_item)	//Data is for the first inserted item
{
	nodeOM* temp_node;
	OM* new_OM = (OM*)malloc(sizeof(OM));
	if(new_OM == NULL)
	{
		return NULL;
	}
	//Initialize OM
	new_OM->root = create_nodeOM();
	new_OM->root->height = log2(M);
	new_OM->countOM = M;
	Cilk_lock_init(new_OM->lock);
	//Initialize first item
	temp_node = spawn recursive_create_tree(new_OM->root,new_OM->root->height,1);
	sync;
	if(temp_node == NULL)		//LAST RESORT FIX
	{
		temp_node = new_OM->root;
		while(temp_node->height!=0)
		{
			temp_node = temp_node->left;
		}
	}
	if(temp_node == NULL)
		printf("Temp_node is still NULL\n");
	else
	{
		temp_node->item = first_item;
		temp_node->item->parent = temp_node;
		temp_node->item->next = temp_node->item;	//Begin circularly linked list
		temp_node->item->prev = temp_node->item;
		temp_node->item->label = 0;
	}
	do{
		temp_node->count++;
		temp_node = temp_node->parent;
		new_OM->count = 1;
	}while(temp_node != NULL);
	return new_OM;
}

cilk nodeOM* recursive_create_tree(nodeOM* root, int height, int is_return)	//Height of the node being inputted
{			//If 0 for is return, no return needed
	nodeOM* temp;
	nodeOM* cilk_throwaway;
	if(height <= 0)
	{
		return root;
	}
	root->left = create_nodeOM();
	root->left->height = height - 1;
	root->left->parent = root;
	root->right = create_nodeOM();
	root->right->height = height - 1;
	root->right->parent = root;
	cilk_throwaway = spawn recursive_create_tree(root->right,root->right->height,0);
	temp = spawn recursive_create_tree(root->left,root->left->height,1);	//How does the return affect this?
	if(is_return != 0)
		return temp;
	else return NULL;
}


struct item_pair* create_item_pair(itemOM* itemA, itemOM* itemB)
{
	struct item_pair* new_pair = (struct item_pair*)malloc(sizeof(struct item_pair));
	new_pair->itemA = itemA;
	new_pair->itemB = itemB;
	return new_pair;
}

nodeOM* create_nodeOM()
{
	nodeOM* new_node = (nodeOM*)malloc(sizeof(nodeOM));
	if(new_node == NULL)
	{
		printf("Error Allocating Memory\n");
		return NULL;
	}
	new_node->right = NULL;
	new_node->left = NULL;
	new_node->parent = NULL;
	new_node->height = VOID_DATA;
	new_node->count = 0;
	new_node->item = NULL;
	new_node->is_marked = false;
	new_node->root_split = false;
	return new_node;
}

itemOM* create_itemOM(void* data)
{
	itemOM* new_item = (itemOM*)malloc(sizeof(itemOM));
	if(new_item == NULL)
	{
		printf("Error Allocating Memory\n");
		return NULL;
	}
	new_item->next = NULL;
	new_item->prev = NULL;
	new_item->parent = NULL;
	new_item->label = VOID_DATA;
	new_item->data = data;
	return new_item;
}

//-------Print-----------------
void print_OM(OM* current_OM, int is_tree)
{
	recursive_print_OM(current_OM->root, 0, current_OM->count, is_tree);
	printf("Label Space: %d\n", current_OM->countOM);
	printf("Count: %d\n", current_OM->count);
	printf("Root Density: %.4f\n", density(current_OM->root));
	return;
}

void recursive_print_OM(nodeOM* current_node, int label, int count, int is_tree)
{
	int i;
	int temp_label;
	nodeOM* temp_node;
	itemOM* temp_item;
	//Dont do anything if its null
	if(current_node == NULL)
	{
		printf("NULL SUBTREE");
		return;
	}
	if(is_tree != 0)
	{
		//Move down the left side of the tree
		if(current_node->height != 0 && current_node->left != NULL)
			recursive_print_OM(current_node->left, label, count, is_tree);
		
		//If its a leaf and it has an item, print the item
		if(current_node->item != NULL && current_node->height == 0)
		{
			if(current_node->item->data== NULL)
				printf("[%d] I[nil]\t||", current_node->item->label);
			else printf("[%d] I[%d]\t||", current_node->item->label, *((int*)current_node->item->data));
		}
		else if (current_node->height == 0) printf("[%d]\t\t||", label);
		else printf("\t\t||");
		
		//printf("height: %d\n",current_node->height);
		for(i=0; i<current_node->height; ++i)
		{
			printf("\t");
		}
		
		//Print current node
		if(current_node->count > 0)
			if(current_node->is_marked == true)
				printf("(%d)[%d]{%.2f} M\n", current_node->height, current_node->count,density(current_node));
			else printf("(%d)[%d]{%.2f}\n", current_node->height, current_node->count,density(current_node));
		else
			if(current_node->is_marked == true)
				printf("(%d) M\n",current_node->height);
			else printf("(%d)\n",current_node->height);
		
		//Move down the right side of the tree
		if(current_node->height != 0 && current_node->right != NULL)
			recursive_print_OM(current_node->right, label + pow(2,current_node->right->height), count, is_tree);
		
		return;
	}
	else
	{
		//Find leftmost item
		temp_node = current_node;
		while(temp_node->height > 0)
		{
			if(temp_node == NULL)
			{
				printf("temp_node is null\n");
				break;
			}
			if(temp_node->left == NULL)
			{
				if(temp_node->right == NULL)
					break;
				else
					temp_node = temp_node->right;
			}
			else
				temp_node = temp_node->left;
			
		}
		
		if(temp_node != NULL)
		{
			temp_item = temp_node->item;
			temp_label = temp_item->label;
			//Print item list
			for(i=0; i<count+1; ++i)
			{
				if(temp_item != NULL)
				{				
					if(temp_item->data == NULL) printf("I l[%d] d[nil] \t\t\n", temp_item->label);
					else printf("I l[%d] d[%d] \t\t\n", temp_item->label, *((int*)temp_item->data));
					temp_item = temp_item->next;
				}
				else
				{
					printf("Temp_item is null\n");
					break;
				}
			}
			printf("Last item should be same as first item (circularly linked)\n");
		}
		else printf("temp_node is NULL\n");
		
		return;
	}
}




















