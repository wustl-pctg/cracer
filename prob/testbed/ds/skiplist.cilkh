#include <stdio.h>
#include <stdlib.h>
#include <string.h> // memcpy

#include <cilk-lib.cilkh>
#include <cilk.h>
#include "../util/parfor.cilkh"

typedef int T;                  /* type of item to be stored */
#define compLT(a,b) (a < b)
#define compEQ(a,b) (a == b)
#define swap(a, b, t) t = a; a = b; b = t

typedef struct {
	int add;
	T data;
} Operation;

/* levels range from (0 .. MAXLEVEL) */
#define MAXLEVEL 30
#define INSERT_CHUNK 512

typedef struct Node_ {
  T data;                     /* user's data */
  struct Node_ *forward[1];   /* skip list forward pointer */
} Node;

typedef struct {
  Node *hdr;                  /* list Header */
  int listLevel;              /* current level of list */
} SkipList;

SkipList list;                  /* skip list information */

#define NIL list.hdr

Node* insertNode(T data);
void deleteNode(T data);
Node *findNode(T data);
void initList();
int get_size();

inline int choose_pivot(int *array, int left, int right);
inline int partition(int *array, int left, int right,
                            int pivot_index);
void quicksort(int* array, int left, int right);
void insertionSortSeq (void* data, size_t numElements);
cilk void recursiveInsertBatch(void* data, int start, int end);
cilk void batch_insert_par(void* dataStruct, void* data,
                           size_t numElements, void* results);
void batch_createNodes(int index, void* info);
void batch_relateNodes(int index, void* infos);
cilk void batch_mergeLists(int index, void* infos);
cilk void batch_insert_par2(void* dataStruct, void* data,
                            size_t numElements, void* results);
void batch_insert_seq(Batch* pending, void* ds, void* data,
                      size_t num_ops, void* results);
void popBatch(Batch* pending, void* dataStruct, void* data,
              size_t numElements, void* results);
void insert_seq(CilkWorkerState *const ws, int* add_op);
void insert_par(CilkWorkerState *const ws, int* add_op);
void batchPopNode (CilkWorkerState *const ws, int inValue);
