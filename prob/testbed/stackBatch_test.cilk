#include <getopt.h>
#include <unistd.h>
#include <string.h>

#include "util/timer.h"
#include "ds/stack.cilk"
#define TSIZE 20

Stack* setUp(){
     Stack* ds = create_stack();
     return ds;
}

cilk void makeInsert(int i, void* data){
    Stack* ds = data;
    spawn pushBatchify(ds,i);
    sync;
}

cilk void makeRemove(int i, void* data){
  Stack* ds = data;
  spawn pushBatchify(ds,i);
  sync;
}

cilk void runTest(Stack* ds, int size){
     spawn parforpar(0,size-1,1,&makeInsert, ds);    
     sync;
}

cilk void runRemoveTest(Stack* ds, int size){
     spawn parforpar(0,size-1,1,&makeRemove, ds);    
     sync;
}

void usage(){
  printf("prog_num [-s] <test_size> [-v]\n");
}

cilk int main(int argc, char* argv[]){
    Stack* test_stack = setUp();
    int testSize=TSIZE;
    int verbose=0;
    int opt_index;
    int option;
    float addTime;
    float removeTime;
    struct option all_options[] ={
      {"size",required_argument,0,'s'},
      {"verbose", no_argument,0,'v'}
    };
    while((option = getopt_long(argc,argv,"s:v",all_options,&opt_index))!=-1){
      switch(option){
      case 0:
	if (all_options[opt_index].flag!=0){
	  break;
	}
	else{
	  printf("Invalid option.\n");
	  break;
	}
      case 's':
	testSize=atoi(optarg);
	break;
      case 'v':
	verbose=1;
	break;
      default:
	usage();
	return -1;
      }
    }
       //Processes arugment (no -s option) also as size.
	if (argc==1 || optind != argc-1){
	  usage();
	  return -1;
	} else {
	  testSize=atoi(argv[optind]);
	}
    //Begin running tests and start the timer. 
   if (verbose) {
      printf("begin test\n");
    }
    startTimer();
    //Start timing here.
    spawn runTest(test_stack,testSize);
    sync;
    //End timing here.
    stopTimer();    
    addTime = getWallTime();
    printf("%lf\n", addTime);
    startTimer();
    spawn runRemoveTest(test_stack,testSize);
    sync;
    stopTimer();
    removeTime=getWallTime();
    if (verbose){
      printf("Batch. Size %d. \n",testSize);
    }
    printf("%lf\n", removeTime);
    if(verbose) {
      printStack(test_stack);
    }
    return 0;
}
