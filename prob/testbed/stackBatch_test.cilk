#include "util/timer.h"
#include "ds/stack.cilk"
#include "util/benchOptions.h"
#include "util/parfor.cilkh"
#include <stdlib.h>
#include <time.h>

#define TSIZE 20
int parThreshold=1024;
int algWork = 100;
void doAlgWork(int writes) {
	int j, k;
	for (j=0; j < writes; j++){
		__asm__ __volatile("movl %1, %%eax;\n\t addl $5, %%eax;\n\t movl %%eax, %0;":"=r"(k):"r"(j):"%eax");
	}
}

void doFunnyProcedure() {
  int i;
  void* rand_mem;
  printf("do memory thing!\n");
  srand(time(NULL));
  for (i=0; i< (1024*64); ++i) {
    rand_mem = malloc(rand()%128+1 );
    free(rand_mem);
  }
}

Stack* setUp(){
	Stack* ds = create_stack();
	return ds;
}

cilk void mixedInsert(int i, void* data){
  Stack* ds = data;
  Operation op;
  op.data=i;
  op.add=1;
	//doAlgWork(algWork);
	spawn mixedBatchify(ds,op);
  sync;
}

cilk void mixedRemove(int i, void* data){
  Stack* ds = data;
  Operation op;
  op.data=i;
  op.add=0;
  //doAlgWork(algWork);
  spawn mixedBatchify(ds,op);
  sync;
}

cilk void parforpar_add(const int begin, const int end, const int incr,
													 const int thresh,
													 void *data)
{
  int i;

  if ((end - begin)/incr <= thresh) {
      Stack* ds = data;
      Operation op;
    for (i = begin; i <= end; i += incr) {
      op.data=i;
      op.add=1;
      mixedBatchify_raw(ds,op,_cilk_ws);
     }
  } else {
    i = begin+(end-begin)/2;
    spawn parforpar_add(begin, i, incr, thresh, data);
    spawn parforpar_add(i + 1, end, incr, thresh,data);
  }
}
cilk void parforpar_rem(const int begin, const int end, const int incr,
													 const int thresh,
													 void *data)
{
  int i;

  if ((end - begin)/incr <= thresh) {
    Stack* ds = data;
    Operation op;
    for (i = begin; i <= end; i += incr) {
      op.data=i;
      op.add=0;
      mixedBatchify_raw(ds,op,_cilk_ws);
     }
  } else {
    i = begin+(end-begin)/2;
    spawn parforpar_rem(begin, i, incr, thresh, data);
    spawn parforpar_rem(i + 1, end, incr, thresh,data);
  }
}

cilk void runMixedTest(Stack* ds, int size, int add_part, int raw){
  int threshold = parThreshold ? parThreshold : PARFOR_THRESHOLD;
  int add_size = (add_part * size)/100;
  if (raw){
    spawn parforpar_add(0,add_size,1,threshold,ds);
    spawn parforpar_rem(0,size-add_size,1,threshold,ds);
  }
  else {
    spawn parforpar_thresh(0,add_size,1,threshold,&mixedInsert,ds);
    spawn parforpar_thresh(0,size-add_size,1,threshold,&mixedRemove,ds);
  }
  sync;
}

cilk int main(int argc, char* argv[]){
	Stack* test_stack = setUp();
	BenchOptions options;
	int testSize;
	int add_percentage;
	getOptions(argc, argv, &options);
	testSize=options.operations;
	if (options.contaminate){
	   doFunnyProcedure();
	}
	if (options.special){
		add_percentage=options.special;
	}
	else {
		add_percentage=50;
	}
	startTimer();
	spawn runMixedTest(test_stack,testSize,add_percentage,options.raw);
	sync;
	stopTimer();
	if (options.verbose){
		printf("Batch Mixed. Size %d. \n",testSize);
	}
	printf("%lf\n",getWallTime());
	return 0;
}
