
#include "util/timer.h"
#include "ds/stack.cilk"
#include "util/benchOptions.h"
#include "util/parfor.cilkh"

#define TSIZE 20

Stack* setUp(){
     Stack* ds = create_stack();
     return ds;
}

cilk void makeInsert(int i, void* data){
    Stack* ds = data;
    spawn pushBatchify(ds,i);
    sync;
}

cilk void makeRemove(int i, void* data){
    Stack* ds = data;
    spawn popBatchify(ds);
    sync;
}

cilk void mixedInsert(int i, void* data){
  Stack* ds = data;
  Operation op;
  op.data=i;
  op.add=1;
  spawn mixedBatchify(ds,op);
  sync;
}

cilk void mixedRemove(int i, void* data){
  Stack* ds = data;
  Operation op;
  op.data=i;
  op.add=0;
  spawn mixedBatchify(ds,op);
  sync;
}

cilk void runAddTest(Stack* ds, int size){
     spawn parforpar(0,size-1,1,&makeInsert, ds);
     sync;
}

cilk void runRemoveTest(Stack* ds, int size){
     spawn parforpar(0,size-1,1,&makeRemove, ds);
     sync;
}

cilk void runMixedTest(Stack* ds, int size){
  spawn parforpar(0,(size/2),1,&makeInsert,ds);
  spawn parforpar(0,(size/2),1,&makeRemove,ds);
  sync;
}

cilk int main(int argc, char* argv[]){
    Stack* test_stack = setUp();
    BenchOptions options;
    int testSize;
   
    getOptions(argc, argv, &options);
    testSize=options.operations;
    if (options.dedicated){
	startTimer();
	spawn runAddTest(test_stack,testSize);
	sync;
	stopTimer();
	if (options.verbose){
	  printf("Batch Add. Size %d. \n", testSize);
	}
	printf("%lf\n",getWallTime());
	startTimer();
	spawn runRemoveTest(test_stack,testSize);
	sync;
	stopTimer();
	if (options.verbose){
	  printf("Batch Remove. Size %d. \n",testSize);
	}
	printf("%lf\n",getWallTime());
    }
    else {
      startTimer();
      spawn runMixedTest(test_stack,testSize);
      sync;
      stopTimer();
      if (options.verbose){
	printf("Batch Mixed. Size %d. \n",testSize);
      }
      printf("%lf\n",getWallTime());
    }
    return 0;
}
