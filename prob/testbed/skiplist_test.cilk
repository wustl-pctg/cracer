#include <stdio.h>
#include <stdlib.h>

#include "util/timer.h"
#include "util/benchOptions.h"
#include "util/parfor.cilkh"
#include "ds/skiplist.cilkh"

#define INIT_SIZE 20000

int g_par_threshold = 1024;
BenchOptions g_options;
T* vals;
Operation g_add_op = {1, 0};
Operation g_rem_op = {0, 0};

cilk void parfor_skip(const int begin, const int end, Operation op)
{
  int i;

  if (end - begin <= g_par_threshold) {

		for (i = begin; i <= end; ++i) {
      op.data = vals[i];
      if (g_options.seq)
        insert_seq(_cilk_ws, op);
      else
        insert_par(_cilk_ws, op);
		}
  } else {
    i = begin+(end-begin)/2;
    spawn parfor_skip(begin, i, op);
    spawn parfor_skip(i + 1, end, op);
  }
}

SkipList* set_up(size_t initial_size, size_t num_ops)
{
  int i;
  SkipList* ds = &list;

  // Initialize the skip list.
  initList();

  for (i = -1*initial_size; i < 0; i++) {
    insertNode(rand());
    //insertNode(i);
  }

  // Prepare our array of random numbers.
  vals = malloc(sizeof(*vals) * num_ops);
  if (!vals)
    fprintf(stderr, "insufficient memory (vals)\n");

  for (i = 0; i < num_ops; i++) {
    vals[i] = rand();
    //vals[i] = i;
  }

  return ds;
}

cilk void runMixedTest(SkipList* ds, int size, int add_part)
{

  int add_size = (add_part * size)/100;

  spawn parfor_skip(0, add_size, g_add_op);
  //  spawn parfor_skip(add_size, size, g_rem_op);
  sync;
}

cilk int main(int argc, char* argv[])
{
  SkipList* ds;
  int num_ops;

  getOptions(argc, argv, &g_options);
  num_ops = g_options.operations;

  ds = set_up(INIT_SIZE, num_ops);

  startTimer();
  spawn runMixedTest(ds, num_ops, 100);
  sync;
  stopTimer();

  if (g_options.verbose){
    printf("Batch Add. Size %d. \n", num_ops);
  }

  printf("%lf\n",getWallTime());

  return 0;
}
