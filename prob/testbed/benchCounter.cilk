#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>

#include "util/timer.h"
#include "util/benchOptions.h"
#include "util/parfor.cilkh"

#include "ds/counter.cilkh"

// Default values.
#define MAX_NUM 100
#define OPS 10
#define ITER 1

extern int getOptions(int, char**, BenchOptions*);

cilk int main(int argc, char **argv)
{
	BenchOptions opt;
	int *data;
	int i, sum = 0;
	double lockTime = 0, batchTime = 0;
	Counter *counter;
	IncrArgList args;

	opt.verbose = 0;
	opt.noBatch = 0;
	opt.noLock = 0;
	opt.operations = OPS;
	opt.iterations = ITER;

	getOptions(argc, argv, &opt);

	data = malloc(opt.operations * sizeof(int));

	for (i = 0; i < opt.iterations; i++) {
		srand(time(NULL));
		for (i = 0; i < opt.operations; i++) {
			data[i] = rand() % (2*MAX_NUM) - MAX_NUM;
			sum += data[i];
		}

		args.nums = data;

		if (!opt.noBatch) {
			startTimer();
			counter = counterCreate(0);
			args.counter = counter;
			spawn parforpar(0, opt.operations - 1, 1,
											parforCounterBatchIncrement, (void*) &args);
			sync;
			stopTimer();
			batchTime += getWallTime();

			// Make sure we got the correct result.
			assert(counterGetValue(counter) == sum);
		}

		if (!opt.noLock) {
			startTimer();
			counter = counterLockCreate(0);
			args.counter = counter;
		spawn parforpar(0, opt.operations - 1, 1,
											parforCounterLockIncrement, (void*) &args);
			sync;
			stopTimer();
			lockTime += getWallTime();

			// Make sure we got the correct result.
			assert(counterGetValue(counter) == sum);
		}
	} // End for loop over opt.iterations

	// Print results.
	printf("%lf,%lf\n", batchTime/(double)opt.iterations, lockTime/(double)opt.iterations);

	// Cleanup.
	free(data);
	return 0;
}
