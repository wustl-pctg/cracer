//#define USE_LOCKS			//Should be un-defined for batch tests
#include "ds/dynArray.cilk"
#include <getopt.h>
#include "util/timer.h"

void usage() {
  printf("use default arguments");
}

cilk int main(int argc, char **argv)
{
	
	dyn_array* test_array;
	int* integer_array;
	int i;
	
	int test_size = 10;
	int verbose = 0;
	int option;
	int opt_index;

	struct option all_options[] ={
     {"size",required_argument,0,'s'},
     {"verbose", no_argument,0,'v'}
    };
	
	while((option = getopt_long(argc,argv,"s:v",all_options,&opt_index))!=-1){
     
	switch(option){
      case 0:
		if (all_options[opt_index].flag!=0){
		  break;
		}
		else{
		  printf("Invalid option.\n");
		  break;
		}
      case 's':
	test_size=atoi(optarg);
	break;
      case 'v':
	verbose=1;
	break;
      default:
	usage();
	return -1;
      }
    }
	
	integer_array = malloc(sizeof(int)*test_size);
	test_array = create_array();
	
	
	for(i = 0; i< test_size; ++i)
	{
		integer_array[i] = i;
	}

	//Perform Tests--------------------------
	#ifdef USE_LOCKS
		if (verbose) {
		  printf("begin test - USE_LOCKS is on - it should be off\n");
		}
	#else
		if (verbose) {
		  printf("begin test - USE_LOCKS is off\n");
		}
	#endif
	
	startTimer();
	spawn parallel_for_batch_push_back(test_array, integer_array, test_size);
	sync;
	stopTimer();
	
	if (verbose){
      printf("Batch. Size %d. \n", test_size);
    }
    printf("%lf\n", getWallTime());
	
	delete_array(test_array);
	free(integer_array);
	return 0;
}

