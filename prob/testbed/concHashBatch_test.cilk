#include "util/timer.h"
#include "ds/concHash.cilk"
#include <math.h>

//Tyler Romero and Kefu Liu
//need to compile with the -lm flag after everything for some reason

int printints(void* input){	//This doesnt mix with sequential insert for some reason
	hashTableItem* ptr;
    if (input==NULL) {
        printf("{nil}");
    }
    else {
        ptr=(hashTableItem*)input;
        printf("{");
        do {
			printf("%d ",ptr->key);
            ptr=ptr->next;
        }
        while (ptr!=NULL);
        printf("}");
    }
}

cilk int main(int argc, char **argv)
{
    int test_size = 10;
	int* input;
	hashTable* table1 = hashTable_create(15);
	hashTable* table2 = hashTable_create(15);
	hashTableItem** search_array1; 		//[TEST_SIZE/4]
	hashTableItem** search_array2;
    int i;
	
    if (argc > 2){
		printf("Incorrect number of arguements\n");
	} else if(argc == 2)
	{
		test_size = atoi(argv[1]);
	}
	
	input = (int*)malloc(test_size * sizeof(int));
	
	for(i=0; i<test_size; ++i)
	{
		input[i] = i;
	}
	
	//----------------------------------------------------------------------------
	
	search_array1 = (hashTableItem**)malloc(test_size/4 * sizeof(hashTableItem*));
	search_array2 = (hashTableItem**)malloc(test_size/4 * sizeof(hashTableItem*));
	
	startTimer();
    /*for (i=0;i<test_size;++i){
        spawn hashTable_insertItem(table1,i);		//Would you want a parallel for for this?
        sync;
    }*/
	spawn hashTable_parallelInsert(table1,input,test_size);
	sync;
	stopTimer();
	printf("\nParallel (Batch) wall time: %lf ms\n", getWallTime());
	printf("Parallel (Batch) process time: %lf ms\n", getProcTime());
	
	//------------------------------------------------------------------------------
	
	startTimer();
	for(i=0; i<test_size; ++i){
		hashTable_sequentialInsert(table2, i);
	}
	stopTimer();
	printf("\nSequential wall time: %lf ms\n", getWallTime());
	printf("Sequential process time: %lf ms\n", getProcTime());
	
	
	//----------------------------------------------------------------------------------
	

	/*parallelRemove does not work due some strange problem with batchify. It works when 
	hashTable_remove is called without it
	
	for(i=0;i<test_size/4;++i)
	{
		search_array1[i] = hashTable_search(table1, i);	//Items to remove
		search_array2[i] = hashTable_search(table2, i);
	}
	
	spawn hashTable_parallelRemove(table1,search_array1,test_size/4);
	sync;

	for(i=0; i<test_size/4; ++i)
	{
		hashTable_sequentialRemove(table2, search_array2[i]);
	}
	*/

	
	free(search_array1);
	free(search_array2);
	hashTable_delete(table1);
	hashTable_delete(table2);
	free(input);
	
	return 0;
}
