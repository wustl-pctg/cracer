#include "complex_2_3_tree.cilk"
#include "util/timer.h"
#include "util/parfor.cilkh"

#define TEST_SIZE 500

typedef struct in {
   void* ds;
   int input;
} dsInput;

cilk void testInsert(int index, void* data){
    dsInput* input = data;
    spawn insert_item(input[index].ds, input[index].input);
    sync;
}

void reset(struct tree23** tree){
    delete_tree(*tree);
    *tree=create_tree(50);
}
cilk int main()
{
	struct tree23 *test_tree = create_tree(50);
    dsInput input[TEST_SIZE];
    int i;
    for (i=0;i<TEST_SIZE;i++){
        input[i].input=i;
        input[i].ds=test_tree;
    }
    /*printf("Start seq run\n");
    startTimer();
    reset(&test_tree);
    for (i=0;i<TEST_SIZE;i++){
        spawn insert_item(test_tree,input[i].input);
        sync;
    }
    stopTimer();
    printf("Wall time: %lf ms\n", getWallTime());
    printf("Proc time: %lf ms\n", getProcTime());
    */
    printf("Start parallel run\n");
    startTimer();
    spawn parforpar_1(0,TEST_SIZE-1,&testInsert,input);
    sync;
    stopTimer();
    printf("Wall time: %lf ms\n", getWallTime());
    printf("Proc time: %lf ms\n", getProcTime());
	delete_tree(test_tree);
	return 0;
}