#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <cilk-lib.cilkh>

//Tyler Romero and Kefu Liu
//The insert functions are finshed, the remove functions have some problem

#define PARALLEL_CUTOFF 100	//!<The cutoff for converting from a parallel_for loop to a sequential for loop
#define ab(j) (j<0)?-j:j	//!<A generic absolute value function

/*! \file
	\brief A dynamically resizing hash table that deals with collisions through chaining. Supports parallel insertion and resizing.
*/


//! A data item in a hash table
/*! A linked list component
*/
typedef struct tableItem{
    int key;						//!<The actuall data being stored
    struct tableItem* prev, *next;	//!<Pointers to the previous and next items in the linked list
} hashTableItem;

//! A hash table
typedef struct {
    hashTableItem** slots;	//!<The array of items that have been hashed
    int size;				//!<The amount of memory allocated to the hash table in terms of integers
    int load;				//!<The number of integer items in the hash table
    Cilk_lockvar* locks;
} hashTable;

/*-----------------------------------Declarations---------------------------------------------------*/
hashTable* hashTable_create(int size);
hashTableItem* hashTable_createItem(int key);
void hashTable_delete(hashTable* dead_table);
void hashTable_deleteItems(hashTableItem* dead_item);
cilk void hashTable_insert(hashTable* table, int key);
cilk void hashTable_batchInsert(hashTable* table, void* insertions, int size, void* results);
hashTableItem* hashTable_search(hashTable* table, int key); //search for the key, returns the dataItem.
cilk void hashTable_remove(hashTable* table, hashTableItem* item);
cilk void hashTable_batchRemove(hashTable* table, void* removals, int input_size, void* results);
int hashTable_hash(int size, int key);
void hashTable_print(hashTable* table, int (*printfunct)(void*));
cilk void resize(hashTable* current_table, int new_size);
cilk void parallel_for1(hashTable* current_table, int* inputs, cilk void(*parallel_function)(hashTable*,int), int start, int end);
cilk void parallel_for2(hashTable* current_table, hashTable* temp, cilk void(*parallel_function)(hashTable*,hashTable*,int), int start, int end);
cilk void parallel_for3(hashTable* current_table, int* temp, cilk void(*parallel_function)(hashTable*,int*,int), int start, int end);
cilk void parallel_for4(hashTable* current_table, hashTableItem** temp, cilk void(*parallel_function)(hashTable*,hashTableItem**,int), int start, int end);
cilk void parallel_for_remove(hashTable* current_table, hashTableItem** inputs, cilk void(*parallel_function)(hashTable*,hashTableItem*), int start, int end);
cilk void copy(hashTable* current_table, hashTable* temp, int i);
cilk void parallel_delete(hashTable* current_table, hashTable* place_holder, int i);


/*-----------------------------------Create/Initialize Things---------------------------------------*/
//!Creates a hash table of input size.
/*! \param size the size of the new hash table
	\return a pointer to the new hash table
	\sa hashTable_delete(), hashTable_deleteItems(), hashTable_createItem()
*/
hashTable* hashTable_create(int size){
    int i;
    hashTable* result = (hashTable*)malloc(sizeof(hashTable));		//Allocate hashtable space
    result->size=size;
    result->slots= (hashTableItem**)malloc(size*sizeof(hashTableItem*));			//Allocate containter space
    for(i=0;i<size;++i)
	{
		result->slots[i] = NULL;
	}
	result->load=0;
    result->locks = malloc(size*sizeof(Cilk_lockvar));
    for(i=0;i<size;i++){
        Cilk_lock_init(result->locks[i]);
    }
    return result;
}

//!Creates a hash table item, 
/*!Initializes a linked list item, with key and NULL pointers.
	\param	key the data to be stored
	\return A pointer to the hash table item created
	\sa hashTable_delete(), hashTable_deleteItems(), hashTable_create()
*/
hashTableItem* hashTable_createItem(int key){
    hashTableItem* result = (hashTableItem*)malloc(sizeof(hashTableItem));
    result->key=key;
    result->prev=NULL;
    result->next=NULL;
    return result;
}

/*-----------------------------------Delete/Free things---------------------------------------------------*/
//!Free every part of a Hash Table
/*! \sa hashTable_deleteItems(), hashTable_create(), hashTable_createItem()
*/
void hashTable_delete(hashTable* dead_table)
{
	int i;
	for(i=0; i<dead_table->size; ++i)
	{
		hashTable_deleteItems(dead_table->slots[i]);
	}
	free(dead_table->slots);
	free(dead_table->locks);
	free(dead_table);
}

//!Free all items in a slot
/*! \sa hashTable_delete(), hashTable_create(), hashTable_createItem()
*/
void hashTable_deleteItems(hashTableItem* dead_item)
{
	if(dead_item == NULL)
		return;
	else
	{
		hashTable_deleteItems(dead_item->next);
		free(dead_item);
	}
}

/*--------------------------------------Insert----------------------------------------------*/
//!Insert a key-data pair into the input table.
/*!	A parallel function to insert keys into a hash table
	\param table the table to insert into
	\param key the data to insert
	\sa hashTable_hash(), parallel_for1(), hashTable_insertItem()
*/
cilk void hashTable_insert(hashTable* table, int key) {
    int slot = hashTable_hash(table->size, key);
    hashTableItem* ptr;
    hashTableItem* dataItem = hashTable_createItem(key);
    Cilk_lock(table->locks[slot]);
    if (table->slots[slot]==NULL){ //No list
        table->slots[slot]=dataItem;
        dataItem->next=NULL;
        dataItem->prev=NULL;
    }
    else {
        ptr = table->slots[slot]; //Start at the head of the list.
        while(ptr->next!=NULL) {
            ptr=ptr->next;
        }
        ptr->next=dataItem;
        ptr->next->prev=ptr;
    }
    Cilk_unlock(table->locks[slot]);
}

//!Insert a single item into the Hash Table
/*! This is the function that calls Cilk_batchify
	\param table the hash table to insert into
	\param key the data to insert
*/
cilk void hashTable_insertItem(hashTable* table, int key){
    Cilk_batchify(_cilk_ws, &hashTable_batchInsert, table, &key, sizeof(int), NULL);
}

//! Insert an array of items into the Hash Table in parallel
/*! Called by Cilk_batchify
	\param table the hash table to insert into
	\param insertions the array of data to insert
	\param input_size the size of the insertions array
	\param results a neccessary parameter for Cilk_batchify, pass in NULL
	\sa hashTable_insertItem(), hashTable_insert()
*/
cilk void hashTable_batchInsert(hashTable* table, void* insertions, int input_size,void* results){
    //Insertions will always be a int key followed by a void*
	int* inputs = insertions;
	
	if(input_size+table->load > (table->size * 0.7))	//If current_array needs more space
	{
		spawn resize(table, 2*(table->load+input_size));
		sync;
	}
    table->load+=input_size;
	
	spawn parallel_for1(table, inputs, hashTable_insert, 0, input_size);
	sync;
	
	Cilk_terminate_batch(_cilk_ws);
}

//!A helper function for hashTable_parallelInsert
cilk void insert_iterator(hashTable* table, int* keys, int i)
{
	spawn hashTable_insertItem(table, keys[i]);
}

//!Calls a parallel for loop to call hashTable_insertItem
/*! This is the function you should call to insert something in parallel
	\param table the table to edit
	\param keys An array of keys to insert
	\param size the size of the array of keys
	\sa hashTable_sequentialInsert(), hashTable_insertItem()
*/
cilk void hashTable_parallelInsert(hashTable* table, int* keys, size_t size)
{
	spawn parallel_for3(table, keys, insert_iterator, 0, size);
	sync;
}

//!Insert a single item to the end of a dynamic array. Resizes if nessesary.
/*! Entirely Sequetial
	\param table the hash table to edit
	\param key the key to insert
	\sa hashTable_insertItem(), hashTable_parallelInsert()
*/
void hashTable_sequentialInsert(hashTable* table, int key) {
    
	hashTableItem** temp;
	int i;
	int slot = hashTable_hash(table->size, key);
    hashTableItem* ptr = NULL;
    hashTableItem* dataItem = hashTable_createItem(key);
	if(table->load > (table->size * 0.7))	//If current_array needs more space
	{
		temp = (hashTableItem**)malloc(table->size*2*sizeof(hashTableItem*));
		if(temp==NULL)
		{
			printf("error Allocating Memory\n");
		}
		for(i=0; i<table->size;++i)
		{
			temp[i] = table->slots[i];
		}
		for(i=table->size; i<table->size*2;++i)
		{
			temp[i] = NULL;
		}
		free(table->slots);
		table->slots = temp;
		table->size *= 2;
	}
	
    if (table->slots[slot]==NULL){ //No list, insert on its own
        table->slots[slot]=dataItem;
        dataItem->next=NULL;
        dataItem->prev=NULL;
    }
    else {							//List exists, insert at the end of list
        ptr = table->slots[slot]; //Start at the head of the list.
        while(ptr->next!=NULL) {
            ptr=ptr->next;
        }
        ptr->next=dataItem;
        dataItem->prev=ptr;
    }
	table->load++;
}


//---------------------------Search-------------------------------------------------
//! Search the hash table for a given key
/*! \param table the table to search
	\param key the key to serch for
	\return The hash table item with the given key. If no such item is found, return NULL
*/
hashTableItem* hashTable_search(hashTable* table, int key) {
    int slot;
    hashTableItem* ptr;
    slot = hashTable_hash(table->size, key);
    if (slot<0){
        return NULL;
    }
    if (table->slots[slot]==NULL){ //No list
        return NULL;
    }
    else {
        ptr = table->slots[slot]; //Start at the head of the list.
        while(ptr!=NULL) {
            if (ptr->key==key){
                return ptr;
            }
            ptr=ptr->next;
        }
    }
    return NULL;
}

//----------------------------Remove-----------------------------------------------------
//! Remove an item from a hashtable
/*! \param table the hash table to remove from
	\param item a pointer to the item to remove
	\sa hashTable_batchRemove()
*/
cilk void hashTable_remove(hashTable* table, hashTableItem* item) {
	int slot = 0;
    if (item == NULL || item == 0){
		return; //Do nothing.
    }
    else {
		slot = hashTable_hash(table->size, item->key);
		Cilk_lock(table->locks[slot]);
		if (item->prev==NULL) {			//If item is the first in the slot
            if (item->next==NULL){			//If item is the only item in the slot
				table->slots[slot]=NULL;
            }
            else {							//If item is NOT the only item in the slot
				table->slots[slot]=item->next;
				item->next->prev=NULL;
            }
        }
        else {							//If item is NOT the first in the slot
			item->prev->next=item->next;		//<----------Cut the item out of the list
            if (item->next!=NULL){			//If item is the last item in the list
				item->next->prev=item->prev;
            }
        }
		free(item);
		Cilk_unlock(table->locks[slot]);
    }
}

//!Remove multiple items from a hash table
/*! \param table the table to remove from
	\param removals an array of pointers to items to be removed
	\param input_size The size of the removals array
	\param results A parameter required by Cilk_batchify. Pass in NULL
	\sa hashTable_Remove()
*/
cilk void hashTable_batchRemove(hashTable* table, void* removals, int input_size, void* results){
    //Insertions will always be a int key followed by a void*
	hashTableItem** inputs = (hashTableItem**)removals;

    table->load-=input_size;
    //Parallel operation must be done.
	/* for (i=0;i<size;i++) {
		hashTable_insert(table,inputs[i]->key,inputs[i]->item); //Probably need to handle collisions cleverly.
	}*/
	spawn parallel_for_remove(table, inputs, hashTable_remove, 0, input_size);
	sync;
	Cilk_terminate_batch(_cilk_ws);
}

//segfaults when this is called, however, Robert thinks it is a problem with batchify and not my code
// hashTable_batchRemove works on its own.
cilk void hashTable_removeItem(hashTable* table, hashTableItem* item){
   Cilk_batchify(_cilk_ws, hashTable_batchRemove, table, item, sizeof(hashTableItem), NULL);
}

//!A helper function for hashTable_parallelInsert
cilk void remove_iterator(hashTable* table, hashTableItem** keys, int i)
{
	spawn hashTable_removeItem(table, keys[i]);
}

cilk void hashTable_parallelRemove(hashTable* table, hashTableItem** items, size_t size)
{
	spawn parallel_for4(table, items, remove_iterator, 0, size);
	sync;
}

void hashTable_sequentialRemove(hashTable* table, hashTableItem* item)	//Works just fine
{
	int slot = 0;
    if (item==NULL){
		return; //Do nothing.
    }
    else {
		slot = hashTable_hash(table->size, item->key);
		if (item->prev==NULL) {			//If item is the first in the slot
            if (item->next==NULL){			//If item is the only item in the slot
				table->slots[slot]=NULL;
            }
            else {							//If item is NOT the only item in the slot
				table->slots[slot]=item->next;
				item->next->prev=NULL;
            }
        }
        else {							//If item is NOT the first in the slot
			item->prev->next=item->next;		//<----------Cut the item out of the list
            if (item->next!=NULL){			//If item is the last item in the list
				item->next->prev=item->prev;
            }
        }
		free(item);
    }
}
/*--------------------------------Other--------------------------------------------*/
//!Hash the input key based on size.
/*! A multiplicateive hash function based on the golden ratio
	\param size the current size of the hash table
	\param key the key to insert
	\return the corresponding index of the hash table
	\sa hashTable_remove(), hashTable_insert(), hashTable_search()
*/
int hashTable_hash(int size, int key) {
    //Use a simple multiplicative hash for now
	double k = (double) key;
    double magic_number = (sqrt(5)-1)/2;
    int spot;
	
    spot = floor(size *(ab(k*magic_number - floor(k*magic_number))));	//Hash function
    return spot;
}

//!Prints out the hash table given the print function.
/*! \param table the table to print
	\param printfunct a function to print out the hash table with (corresponds to the data type in the hash table)
*/
void hashTable_print(hashTable* table, int (*printfunct)(void*)){
    int i;
	
    for (i=0;i<table->size;i++){
		printfunct(table->slots[i]);	//Our current print function is in test_hash_table.cilk
    }
	printf("\nLoad: %d\t Size: %d\n", table->load, table->size);
}

//! Sets the size of current_array to new_size
/*! Allocates memory for a new array, copies the old array in parallel, frees the old array, and assignes the nw array to the current_array
	\param current_array The array to resize
	\param new_size the size to set the current array to. Must be greater than the aray's current size
*/
cilk void resize(hashTable* current_table, int new_size)
{
    hashTable* newTable;
	int i;
	
	if(current_table->size > new_size)
	{
		printf("Error: Sizing Problem\n");
		return;
	}
	newTable = hashTable_create(new_size);		//Sets all slots to NULL
    
	spawn parallel_for2(current_table, newTable, copy, 0, current_table->size);		//Copy to new array in parallel
	sync;
		
	spawn parallel_for2(current_table, NULL, parallel_delete, 0, current_table->size); //free the contents of the old slots
	sync;
	
	free(current_table->locks);
	free(current_table->slots);
	
	current_table->size = newTable->size;
    current_table->load = newTable->load;
    current_table->locks = newTable->locks;
    current_table->slots = newTable->slots;
    free(newTable);
}


/*-------------------------Parallel Functions--------------------------------------*/
//!A parallel_for loop for functions with arguements (hastTable*,int)
/*! \param current_table the table to edit
	\param inputs an array of integers to edit the table with
	\param parallel_function A parallel function with arguements (hashTable*,int)
	\param start the startin point of the for loop: for(i=0;i<end;++i)
	\param end the ending point of the for loop: for(i=start;i<end;++i)
	\sa hashTable_insert(), hashTable_batchInsert()
*/
cilk void parallel_for1(hashTable* current_table, int* inputs, cilk void(*parallel_function)(hashTable*,int), int start, int end)
{
	int middle = start+(end-start)/2;
	if (end-start<=PARALLEL_CUTOFF) {
		for (start; start < end; ++start) {
            spawn parallel_function(current_table, inputs[start]);
		}
    }
	else
	{		
		spawn parallel_for1(current_table, inputs, parallel_function, start, middle); 		//start -> middle-1
		spawn parallel_for1(current_table, inputs, parallel_function, middle+1, end); 		//middle+1 -> end-1
		spawn parallel_function(current_table, inputs[middle]);	//middle
	}
}

//!A parallel_for loop for functions with arguements (hastTable*,hashTable*,int)
/*! \param current_table the table to edit
	\param temp a pointer to a temporary hash table
	\param parallel_function A parallel function with arguements (hashTable*, hashTable*,int)
	\param start the starting point of the for loop: for(i=0;i<end;++i)
	\param end the ending point of the for loop: for(i=start;i<end;++i)
	\sa resize(), copy()
*/
cilk void parallel_for2(hashTable* current_table, hashTable* temp, cilk void(*parallel_function)(hashTable*,hashTable*,int), int start, int end)
{
	int middle = start+(end-start)/2;
	if (end-start<=PARALLEL_CUTOFF) {
		for (start; start < end; ++start) {
            spawn parallel_function(current_table, temp, start);
		}
    }
	else
	{		
		spawn parallel_for2(current_table, temp, parallel_function, start, middle); 	//start -> middle-1
		spawn parallel_for2(current_table, temp, parallel_function, middle+1, end); 	//middle+1 -> end-1
		spawn parallel_function(current_table, temp, middle);						//middle
	}
}

//!A parallel_for loop for functions with arguements (hastTable*,int*,int)
/*! \param current_table the table to edit
	\param temp a pointer to a temporary hash table
	\param parallel_function A parallel function with arguements (hashTable*, int*,int)
	\param start the starting point of the for loop: for(i=0;i<end;++i)
	\param end the ending point of the for loop: for(i=start;i<end;++i)
	\sa hashTable_parallelInsert(), insert_iterator()
*/
cilk void parallel_for3(hashTable* current_table, int* temp, cilk void(*parallel_function)(hashTable*,int*,int), int start, int end)
{
	int middle = start+(end-start)/2;
	if (end-start<=PARALLEL_CUTOFF) {
		for (start; start < end; ++start) {
            spawn parallel_function(current_table, temp, start);
		}
    }
	else
	{		
		spawn parallel_for3(current_table, temp, parallel_function, start, middle); 	//start -> middle-1
		spawn parallel_for3(current_table, temp, parallel_function, middle+1, end); 	//middle+1 -> end-1
		spawn parallel_function(current_table, temp, middle);						//middle
	}
}

//!A parallel_for loop for functions with arguements (hastTable*,hashTableItem**,int)
/*! \param current_table the table to edit
	\param temp a pointer to an array of hashTableItems
	\param parallel_function A parallel function with arguements (hashTable*, hashTableItem**,int)
	\param start the starting point of the for loop: for(i=0;i<end;++i)
	\param end the ending point of the for loop: for(i=start;i<end;++i)
	\sa hashTable_parallelRemove(), remove_iterator()
*/
cilk void parallel_for4(hashTable* current_table, hashTableItem** temp, cilk void(*parallel_function)(hashTable*,hashTableItem**,int), int start, int end)
{
	int middle = start+(end-start)/2;
	if (end-start<=PARALLEL_CUTOFF) {
		for (start; start < end; ++start) {
            spawn parallel_function(current_table, temp, start);
		}
    }
	else
	{		
		spawn parallel_for4(current_table, temp, parallel_function, start, middle); 	//start -> middle-1
		spawn parallel_for4(current_table, temp, parallel_function, middle+1, end); 	//middle+1 -> end-1
		spawn parallel_function(current_table, temp, middle);						//middle
	}
}


//!A parallel_for loop for functions with arguements (hastTable*,hashTableItem*)
/*! \param current_table the table to edit
	\param inputs an array of pointers to hashTableItems
	\param parallel_function A parallel function with arguements (hashTable*,hashTableItem*)
	\param start the startin point of the for loop: for(i=0;i<end;++i)
	\param end the ending point of the for loop: for(i=start;i<end;++i)
	\sa hashTable_remove(), hashTable_batchRemove()
*/
cilk void parallel_for_remove(hashTable* current_table, hashTableItem** inputs, cilk void(*parallel_function)(hashTable*,hashTableItem*), int start, int end)
{
	int middle = start+(end-start)/2;
	if (end-start<=PARALLEL_CUTOFF) {
		for (start; start < end; ++start) {
            spawn parallel_function(current_table, inputs[start]);
		}
    }
	else
	{		
		spawn parallel_for_remove(current_table, inputs, parallel_function, start, middle); 		//start -> middle-1
		spawn parallel_for_remove(current_table, inputs, parallel_function, middle+1, end); 		//middle+1 -> end-1
		spawn parallel_function(current_table, inputs[middle]);	//middle
	}
}

//! A parallel function for copying a hashTable
/*! \param current_table the hash table to copy FROM
	\param temp the hash table to copy TO
	\param i the index in the hash table of the item being copied
*/
cilk void copy(hashTable* current_table, hashTable* temp, int i)
{
    hashTableItem* item = current_table->slots[i];
    hashTableItem* ptr = current_table->slots[i];
    while (ptr!=NULL){
        ptr=ptr->next;
        spawn hashTable_insert(temp,item->key);
        sync;
        temp->load++;
        item=ptr;
    }
}

//! A parallel function to used in resize()
/*! Deletes the contents of the old hash table
	\param current_table the table to delete things from
	\param place_holder A place holder for parallel_for2, pass in NULL
	\param i the current index
*/
cilk void parallel_delete(hashTable* current_table, hashTable* place_holder, int i)
{
	hashTable_deleteItems(current_table->slots[i]);
}