#include <cilk-lib.cilkh>
#include <stdio.h>
#include <cilk.h>

#include "upCounter.cilkh"
#include "prefixSum.cilkh"


Counter* newCounter(int init) {
    Counter* result = malloc(sizeof(Counter));
    result->count=init;
    return result;
}

/*Counter can be incremented. Merely change their value by the amount passed in. This function returns the counter to allow for nested stuff*/
Counter* increment(Counter* counter, int change){
    //Cilk_batchify(_cilk_ws, &change);
    return counter;
}


/*Increment, this time in batch. */
/*Input must correspond to the input that batchify will give the operation.*/
/* This assumes an exclusive prefix sum*/
cilk Counter* batch_increment(void* datastructure, void* op_array, size_t size, void* result) {
      //Several casts to make nicer types (from the void* that batchify gives).
      int* increments = (int*)op_array;
      int numIncrements = (int) size;
      Counter* counter = (Counter*)datastructure;
      int i;
      
      increments[0]+= increments[numIncrements-1]; //Fixes the sum - assumes exclusive prefix sum
      i=spawn prefix_sum(increments, numIncrements);
      sync;
      counter->count+=increments[numIncrements-1];
      return counter;
}