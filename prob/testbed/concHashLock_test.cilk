#define USE_LOCKS
#include "ds/concHash.cilk"
#include <getopt.h>
#include "util/timer.h"
#include <string.h>
#include "util/defaults.h"

void usage() {
  printf("use default arguments");
}

cilk void insertItem(hashTable * table, int* keys, int i){
  spawn hashTable_lockInsert(table,keys[i]);
}

cilk void parfor_ins(hashTable* current_table, int* temp, cilk void(*parallel_function)(hashTable*,int*,int), int start, int end)
{
	int middle = start+(end-start)/2;
	if (end-start<=PARALLEL_CUTOFF) {
		for (start; start < end; ++start) {
            spawn parallel_function(current_table, temp, start);
		}
    }
	else
	{		
		spawn parallel_for3(current_table, temp, parallel_function, start, middle); 	//start -> middle-1
		spawn parallel_for3(current_table, temp, parallel_function, middle+1, end); 	//middle+1 -> end-1
		spawn parallel_function(current_table, temp, middle);						//middle
	}
}

cilk int main(int argc, char **argv)
{
	
	hashTable* test_table;
	int i;
	int* integer_array;
	int test_size = 10;
	int verbose = 0;
	int option;
	int opt_index;

	struct option all_options[] ={
     {"size",required_argument,0,'s'},
     {"verbose", no_argument,0,'v'}
    };
	
	while((option = getopt_long(argc,argv,"s:v",all_options,&opt_index))!=-1){
     
	switch(option){
      case 0:
		if (all_options[opt_index].flag!=0){
		  break;
		}
		else{
		  printf("Invalid option.\n");
		  break;
		}
      case 's':
	test_size=atoi(optarg);
	break;
      case 'v':
	verbose=1;
	break;
      default:
	usage();
	return -1;
      }
    }
	
	test_table = hashTable_create(10);
	integer_array = malloc(sizeof(int)*test_size);
	for(i=0;i<test_size;++i){
	  integer_array[i]=i;
	}
	//Perform Tests--------------------------
	#ifdef USE_LOCKS
		if (verbose) {
		  printf("begin test - USE_LOCKS is on\n");
		}
	#else
		if (verbose) {
		  printf("begin test - USE_LOCKS is off, it should be on\n");
		}
	#endif
	
	startTimer();
	spawn parfor_ins(test_table,integer_array,&insertItem,0,test_size);
	sync;
	stopTimer();
	
	if (verbose){
      printf("Locks. Size %d. \n", test_size);
    }
    printf("%lf\n", getWallTime());
	
	hashTable_delete(test_table);
	return 0;
}

