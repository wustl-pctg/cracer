# 1 "btree.cilk"
# 1 "<command-line>"
# 1 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 1
# 32 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
# 1 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/gcc-builtin.h" 1
# 35 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/gcc-builtin.h"
__nooutput__ typedef void *__builtin_va_list;

extern __nooutput__ void __builtin_stdarg_start (void *, void *);
extern __nooutput__ void __builtin_va_end (void *);

extern __nooutput__ const char *__FUNCTION__;
extern __nooutput__ const char *__PRETTY_FUNCTION__;
extern __nooutput__ const char *__func__;

extern __nooutput__ int __builtin_constant_p();
extern __nooutput__ void *__builtin_alloca();
extern __nooutput__ int __builtin_abs(int);
extern __nooutput__ float __builtin_fabsf(float);
extern __nooutput__ long double __builtin_fabsl(long double);
extern __nooutput__ double __builtin_fabs(double);
extern __nooutput__ long __builtin_labs(long);
extern __nooutput__ void *__builtin_saveregs();
extern __nooutput__ void *__builtin_memcpy();
extern __nooutput__ void *__builtin_memset();
extern __nooutput__ int __builtin_classify_type();
extern __nooutput__ void *__builtin_next_arg();
extern __nooutput__ int __builtin_args_info();
extern __nooutput__ void *__builtin_return_address(unsigned int);
extern __nooutput__ long __builtin_expect(long,long);
# 33 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 2


# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 324 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/predefs.h" 1 3 4
# 325 "/usr/include/features.h" 2 3 4
# 357 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 378 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 379 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 358 "/usr/include/features.h" 2 3 4
# 389 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 390 "/usr/include/features.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 31 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __loff_t loff_t;



typedef __ino_t ino_t;
# 61 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 99 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;
# 123 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __key_t key_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 213 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 229 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 36 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 2




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 150 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 325 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 3 4
typedef int wchar_t;
# 41 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 2

# 1 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-sysdep.h" 1
# 146 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-sysdep.h"
static const char *ident_cilk_sysdep_h __attribute__((__unused__)) = "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk-sysdep.h.in $ $LastChangedBy: bradley $ $Rev: 2311 $ $Date: 2005-07-13 17:38:21 -0400 (Wed, 13 Jul 2005) $"
                                                                                                                                                                                              ;
# 295 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-sysdep.h"
   static inline void CILK_MB(void) {
     __asm__ volatile ("mfence":::"memory");
   }




   static inline int Cilk_xchg(volatile int *ptr, int x)
   {
 __asm__("xchgl %0,%1" :"=r" (x) :"m" (*(ptr)), "0" (x) :"memory");
 return x;
   }
# 516 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-sysdep.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 30 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 47 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 65 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;
# 97 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 107 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 119 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 132 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 32 "/usr/include/x86_64-linux-gnu/sys/time.h" 2 3 4








# 65 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
typedef void *__restrict __timezone_ptr_t;







extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 93 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 191 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 517 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-sysdep.h" 2


# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4

# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 227 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4
# 268 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 305 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;
# 335 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ , __leaf__));
# 354 "/usr/include/unistd.h" 3 4
extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 377 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 418 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 433 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ , __leaf__));
# 445 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);
# 470 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 512 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ , __leaf__)) ;
# 532 "/usr/include/unistd.h" 3 4
extern int dup (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ , __leaf__));
# 544 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern int execv (__const char *__path, char *__const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (__const char *__path, __const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (__const char *__file, char *__const __argv[])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
# 599 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 611 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ , __leaf__));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ , __leaf__));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ , __leaf__));




extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ , __leaf__));
# 647 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ , __leaf__));
# 673 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ , __leaf__));
# 690 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) __attribute__ ((__nothrow__ , __leaf__));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ , __leaf__));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ , __leaf__));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ , __leaf__)) ;
# 723 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ , __leaf__));




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ , __leaf__));






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ , __leaf__));




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ , __leaf__));
# 779 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));
# 793 "/usr/include/unistd.h" 3 4
extern char *ttyname (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ , __leaf__));
# 813 "/usr/include/unistd.h" 3 4
extern int link (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ , __leaf__));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ , __leaf__));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));
# 894 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));







  extern int getopt (int ___argc, char *const *___argv, const char *__shortopts) __asm__ ("" "__posix_getopt") __attribute__ ((__nothrow__ , __leaf__))

                       ;
# 895 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 980 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);
# 994 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ , __leaf__));
# 1018 "/usr/include/unistd.h" 3 4
extern int truncate (__const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 1040 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ , __leaf__)) ;
# 1105 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1136 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__libc_block, int __edflag) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));
# 1174 "/usr/include/unistd.h" 3 4

# 520 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-sysdep.h" 2


typedef long long Cilk_time;

static inline Cilk_time Cilk_get_time(void)
{
     struct timeval tv;
     gettimeofday(&tv, 0);

     return ((Cilk_time)tv.tv_sec * 1000000LL + (Cilk_time)tv.tv_usec);
}

static inline double Cilk_time_to_sec(Cilk_time t)
{
     return (double) t * 1.0E-6;
}

static inline Cilk_time Cilk_get_wall_time(void)
{
     return Cilk_get_time();
}

static inline double Cilk_wall_time_to_sec(Cilk_time t)
{
     return Cilk_time_to_sec(t);
}
# 43 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 2

static const char *cilk_h_ident __attribute__((__unused__)) = "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk.h $ $LastChangedBy: bradley $ $Rev: 2672 $ $Date: 2005-12-20 13:30:02 -0500 (Tue, 20 Dec 2005) $"
                                                                                                                                                                                    ;


enum WorkerType { NORMAL_WORKER, DS_WORKER };


enum DSSTatus { DS_WAITING, DS_DONE };






#pragma nd -


# 1 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-conf.h" 1
# 27 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-conf.h"
static const char *ident_cilk_conf_h __attribute__((__unused__)) = "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk-conf.h $ $LastChangedBy: bradley $ $Rev: 1465 $ $Date: 2004-08-02 06:31:06 -0400 (Mon, 02 Aug 2004) $"
                                                                                                                                                                                         ;
# 158 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-conf.h"
#pragma segments -
# 62 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 2
# 84 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
typedef struct {
  int size;
  ptrdiff_t index;
  void (*inlet) ();
  int argsize;
  ptrdiff_t argindex;
} CilkProcInfo;




struct cilk_alloca_header {
  struct cilk_alloca_header *next;
  size_t size;
};




typedef void (*HookT)(void);

typedef struct hook {
  HookT fn;
  struct hook *next;
} HookList;

extern void Cilk_add_hook(HookList **listp, HookT fn);
extern void Cilk_run_hooks(HookList *list);







extern __cilksafe__ HookList *Cilk_init_global_hooks;
extern __cilksafe__ HookList *Cilk_init_per_worker_hooks;














typedef struct {
  int entry;
  void *receiver;

  CilkProcInfo *sig;
  struct cilk_alloca_header *alloca_h;
 
 
 
 
 
 
 
 
} CilkStackFrame;




typedef CilkStackFrame **CilkStack;
# 172 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
typedef struct {
  volatile CilkStackFrame **head, **tail;

  volatile CilkStackFrame **exception;
  CilkStack stack;
  char __dummy[64];
} CilkClosureCache;


struct Cilk_im_descriptor {
  void *free_list;
  int length;




  int count;
};


struct Cilk_im_stats {
  int used;
  int nmalloc;
  int in_free_lists;


  int length[9];
  char __dummy[64];
};


typedef struct Closure_s Closure;
typedef struct Cilk_options_s Cilk_options;





typedef struct {






  struct Cilk_im_stats *im_info;


  Cilk_options *options;





  const char *assertion_failed_msg;
  const char *stack_overflow_msg;


  __cilksafe__ int active_size;
  __cilksafe__ int pthread_stacksize;


  __cilksafe__ double dsratio;






  void *infofile;
# 257 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
  unsigned int num_threads;
  unsigned int num_steals;

  unsigned int num_real_workers;
  unsigned int num_ds_workers;





  struct ReadyDeque *deques;

  Cilk_time start_time;

  Closure *invoke_main;

  Closure *invoke_ds_main;


  HookList *Cilk_init_global_hooks;
  HookList *Cilk_init_per_worker_hooks;

} CilkReadOnlyParams;


typedef struct CilkGlobalState_s CilkGlobalState;

typedef struct {

  CilkReadOnlyParams *Cilk_RO_params;




  CilkGlobalState *Cilk_global_state;

} CilkContext;



typedef struct {
  CilkClosureCache cache;
  int self;
  struct Cilk_im_descriptor im_descriptor [9];
  size_t stackdepth;
  Cilk_time last_cp_time;
  Cilk_time cp_hack;
  Cilk_time work_hack;
  Cilk_time user_work;
  Cilk_time user_critical_path;
  unsigned int rand_next;
  int abort_flag;
  int barrier_direction;
  char __dummy[64];
  CilkContext *context;




  enum WorkerType type;
} CilkWorkerState;

typedef struct{

  CilkContext *context;
  int id;

} CilkChildParams;


typedef struct BatchOp{

  void (*operation)(CilkContext*, void**, size_t);
  void *args;
  size_t size;
  volatile int status;


} BatchOp;



typedef struct {
  int nprocs;
  BatchOp* array;
} work_array;

work_array ds_work_array;





extern void Cilk_dprintf(CilkWorkerState *const ws, const char *fmt,...);
extern void Cilk_die_internal(CilkContext *const context, CilkWorkerState *const ws, const char *fmt,...);
extern void Cilk_unalloca_internal(CilkWorkerState *const ws,
       CilkStackFrame *f);




extern void *Cilk_internal_malloc(CilkWorkerState *const ws, size_t);
extern void Cilk_internal_free(CilkWorkerState *const ws, void *p, size_t size);
# 371 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
extern CilkContext *Cilk_init(int* argc,char** argv);
extern void Cilk_terminate(CilkContext *const context);





static inline Cilk_time Cilk_get_elapsed_time(CilkWorkerState *const ws)
{
  Cilk_time then = ws->last_cp_time;
  Cilk_time now = Cilk_get_time();

  ;

  ws->last_cp_time = now;
  return now - then;
}
# 398 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
static inline int Cilk_internal_malloc_canonicalize(size_t size)
{
  if (size <= 16 && 16 >= 64) return 16;;
  if (size <= 32 && 32 >= 64) return 32;;
  if (size <= 64 && 64 >= 64) return 64;;
  if (size <= 128 && 128 >= 64) return 128;;
  if (size <= 256 && 256 >= 64) return 256;;
  if (size <= 512 && 512 >= 64) return 512;;
  if (size <= 1024 && 1024 >= 64) return 1024;;
  if (size <= 2048 && 2048 >= 64) return 2048;;
  if (size <= 4096 && 4096 >= 64) return 4096;;
  return -1;
}




static inline int Cilk_internal_malloc_size_to_bucket(size_t size)
{
  if (size <= 16 && 16 >= 64) return 0;;
  if (size <= 32 && 32 >= 64) return 1;;
  if (size <= 64 && 64 >= 64) return 2;;
  if (size <= 128 && 128 >= 64) return 3;;
  if (size <= 256 && 256 >= 64) return 4;;
  if (size <= 512 && 512 >= 64) return 5;;
  if (size <= 1024 && 1024 >= 64) return 6;;
  if (size <= 2048 && 2048 >= 64) return 7;;
  if (size <= 4096 && 4096 >= 64) return 8;;
  return -1;
}




static inline int Cilk_internal_malloc_bucket_to_size(int b)
{
  if (0 == b) return 16;;
  if (1 == b) return 32;;
  if (2 == b) return 64;;
  if (3 == b) return 128;;
  if (4 == b) return 256;;
  if (5 == b) return 512;;
  if (6 == b) return 1024;;
  if (7 == b) return 2048;;
  if (8 == b) return 4096;;
  return -1;
}
# 453 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
static inline void Cilk_fence(void)
{
  CILK_MB();
}





static inline void Cilk_membar_StoreStore(void)
{
  __asm__ __volatile__ ("": : :"memory");
}





static inline void Cilk_membar_StoreLoad(void)
{
  CILK_MB();
}





extern int Cilk_sync(CilkWorkerState *const ws);
extern int Cilk_exception_handler(CilkWorkerState *const ws, void *, int);
extern void Cilk_set_result(CilkWorkerState *const ws,
       void *resultp, int size);
extern void Cilk_after_sync_slow_cp(CilkWorkerState *const ws,
        Cilk_time *work, Cilk_time *cp);
extern void Cilk_abort_standalone(CilkWorkerState *const ws);
extern void Cilk_abort_slow(CilkWorkerState *const ws);
extern void Cilk_event_new_thread(CilkWorkerState *const ws);
extern void Cilk_destroy_frame(CilkWorkerState *const ws,
          CilkStackFrame *f, size_t size);
# 506 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
# 1 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-cilk2c-pre.h" 1

static const char *ident_cilk_cilk2c_pre __attribute__((__unused__)) = "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk-cilk2c-pre.h $ $LastChangedBy: bradley $ $Rev: 1465 $ $Date: 2004-08-02 06:31:06 -0400 (Mon, 02 Aug 2004) $"
                                                                                                                                                                                               ;
# 31 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-cilk2c-pre.h"
static inline void *Cilk_internal_malloc_fast(CilkWorkerState *const ws,
        size_t size)
{
     int bucket;
     void *mem;
     struct Cilk_im_descriptor *d;

     ;

     if (size > 4096)
   return Cilk_internal_malloc(ws, size);

     bucket = Cilk_internal_malloc_size_to_bucket(size);
     d = ws->im_descriptor + bucket;


     if ((mem = d->free_list)) {
   d->free_list = ((void **) mem)[0];
   d->count++;
  




     } else {
   mem = Cilk_internal_malloc(ws, size);
     }

     return mem;
}

static inline void Cilk_internal_free_fast(CilkWorkerState *const ws,
            void *p, size_t size)
{
     int bucket;
     struct Cilk_im_descriptor *d;

     if (size > 4096) {
   Cilk_internal_free(ws, p, size);
   return;
     }

     bucket = Cilk_internal_malloc_size_to_bucket(size);
     d = ws->im_descriptor + bucket;

     if (d->count <= 0)
   Cilk_internal_free(ws, p, size);
     else {
   ((void **) p)[0] = d->free_list;
   d->free_list = p;
   d->count--;

  


     ;
     }
}

static inline void Cilk_destroy_frame_fast(CilkWorkerState *const ws,
            CilkStackFrame *f, size_t size)
{
     { if (f->alloca_h) Cilk_unalloca_internal(ws, f); }



       ;

     Cilk_internal_free_fast(ws, f, size);
}

static inline void *Cilk_create_frame(CilkWorkerState *const ws,
       size_t size, CilkProcInfo *sig)
{
     CilkStackFrame *f = Cilk_internal_malloc_fast(ws, size);
     f->sig = sig;
     f->alloca_h = (struct cilk_alloca_header *) 0;
     ;

     return (void *) f;
}

static inline void Cilk_cilk2c_push_frame(CilkWorkerState *const ws __attribute__((__unused__)),
           CilkStackFrame *frame __attribute__((__unused__)))
{
     ; ;
     ;
     Cilk_membar_StoreStore();
}

static inline void *Cilk_cilk2c_init_frame(CilkWorkerState *const ws,
            size_t s, CilkProcInfo *signat)
{
     volatile CilkStackFrame **t;
     void *f;

     f = Cilk_create_frame(ws, s, signat);
     t = ws->cache.tail;
    
                                                          ;
     *t = (CilkStackFrame *) f;
     Cilk_membar_StoreStore();
     ws->cache.tail = t + 1;
     return f;
}




static inline int Cilk_cilk2c_pop_check(CilkWorkerState *const ws)
{
     volatile CilkStackFrame **t;
     t = ws->cache.tail;
     Cilk_membar_StoreLoad();
     return (ws->cache.exception >= t);
}

static inline void Cilk_cilk2c_pop(CilkWorkerState *const ws)
{
     --ws->cache.tail;
}

static inline void
Cilk_cilk2c_event_new_thread_maybe(CilkWorkerState *const ws __attribute__((__unused__)))
{
     ;
     ;
}

static inline void Cilk_cilk2c_start_thread_slow(CilkWorkerState *const ws __attribute__((__unused__)),
           CilkStackFrame *frame __attribute__((__unused__)))
{
     ;
     ;
     ;
}

static inline void Cilk_cilk2c_before_return_fast(CilkWorkerState *const ws,
        CilkStackFrame *frame,
            size_t size)
{
     ;
     ;
     Cilk_destroy_frame_fast(ws, (CilkStackFrame *) frame, size);
     --ws->cache.tail;
}

static inline void Cilk_cilk2c_before_return_slow(CilkWorkerState *const ws,
        CilkStackFrame *frame,
            size_t size)
{
     Cilk_cilk2c_before_return_fast(ws, frame, size);
}
# 345 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk-cilk2c-pre.h"
static inline void Cilk_cilk2c_start_thread_fast_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_start_thread_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_at_thread_boundary_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_before_spawn_fast_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_before_spawn_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_after_spawn_fast_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_after_spawn_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_at_sync_fast_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_before_sync_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_after_sync_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_before_return_fast_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
static inline void Cilk_cilk2c_before_return_slow_cp(
     CilkWorkerState *const ws __attribute__((__unused__)), CilkStackFrame *frame __attribute__((__unused__)))
{
    ;
    ;
}
# 507 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h" 2
# 538 "/home/bss45/research/parallel_data_structures/parallelDS/split/runtime/cilk.h"
extern __cilksafe__ int Cilk_flags_are_wrong_NODEBUG_NOTIMING_NOSTATS_please_recompile;
static __cilksafe__ int *Cilk_check_flags_at_link_time = &Cilk_flags_are_wrong_NODEBUG_NOTIMING_NOSTATS_please_recompile;

static int Cilk_check_flags_at_link_time_hack(void) __attribute__((__unused__));
static int Cilk_check_flags_at_link_time_hack(void) {
  return *Cilk_check_flags_at_link_time;
}


void Cilk_start(CilkContext *const context,
  void (*main)(CilkWorkerState *const ws, void *args),
  void *args,
  int return_size );

void Cilk_free(void *);
void *Cilk_malloc_fixed(size_t);





#pragma nd +
# 1 "<command-line>" 2
# 1 "btree.cilk"
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/libio.h" 2 3 4
# 172 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 182 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 205 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 273 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 321 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 330 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 366 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 418 "/usr/include/libio.h" 3 4
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 462 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 492 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 109 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;




# 165 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 166 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) ;
# 210 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;

# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 267 "/usr/include/stdio.h" 3 4






extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 296 "/usr/include/stdio.h" 3 4

# 307 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;
# 320 "/usr/include/stdio.h" 3 4
extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

# 352 "/usr/include/stdio.h" 3 4





extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));

# 418 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 449 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (__const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (__const char *__restrict __s, __const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ , __leaf__))

                      ;
# 469 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 500 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (__const char *__restrict __s, __const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 528 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 556 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 571 "/usr/include/stdio.h" 3 4








extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 608 "/usr/include/stdio.h" 3 4
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
# 623 "/usr/include/stdio.h" 3 4





extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 662 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 741 "/usr/include/stdio.h" 3 4





extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 770 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 789 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 812 "/usr/include/stdio.h" 3 4

# 821 "/usr/include/stdio.h" 3 4


extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

# 838 "/usr/include/stdio.h" 3 4





extern void perror (__const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 851 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 870 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);
# 910 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 940 "/usr/include/stdio.h" 3 4

# 2 "btree.cilk" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 207 "/usr/include/stdlib.h" 3 4


__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 327 "/usr/include/stdlib.h" 3 4
extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 378 "/usr/include/stdlib.h" 3 4


extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 469 "/usr/include/stdlib.h" 3 4


extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));

# 508 "/usr/include/stdlib.h" 3 4
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 531 "/usr/include/stdlib.h" 3 4

# 540 "/usr/include/stdlib.h" 3 4




extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));
# 554 "/usr/include/stdlib.h" 3 4






extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 712 "/usr/include/stdlib.h" 3 4





extern int system (__const char *__command) ;

# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);
# 752 "/usr/include/stdlib.h" 3 4



extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 771 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 857 "/usr/include/stdlib.h" 3 4



extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));

# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;
# 964 "/usr/include/stdlib.h" 3 4

# 3 "btree.cilk" 2

# 1 "/usr/include/getopt.h" 1 3 4
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 106 "/usr/include/getopt.h" 3 4
struct option
{
  const char *name;


  int has_arg;
  int *flag;
  int val;
};
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ , __leaf__));
# 175 "/usr/include/getopt.h" 3 4
extern int getopt_long (int ___argc, char *const *___argv,
   const char *__shortopts,
          const struct option *__longopts, int *__longind)
       __attribute__ ((__nothrow__ , __leaf__));
extern int getopt_long_only (int ___argc, char *const *___argv,
        const char *__shortopts,
               const struct option *__longopts, int *__longind)
       __attribute__ ((__nothrow__ , __leaf__));
# 5 "btree.cilk" 2

# 1 "./btree.h" 1






# 1 "/usr/include/strings.h" 1 3 4
# 30 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.7/include/stddef.h" 1 3 4
# 31 "/usr/include/strings.h" 2 3 4







# 114 "/usr/include/strings.h" 3 4
extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__));





# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 126 "/usr/include/strings.h" 2 3 4



extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));



# 8 "./btree.h" 2






typedef enum {false,true} bool;

typedef struct {
        void * key;
        void * val;
} bt_key_val;

typedef struct bt_node {
 struct bt_node * next;
 bool leaf;
        unsigned int nr_active;
 unsigned int level;
        bt_key_val ** key_vals;
        struct bt_node ** children;
}bt_node;

typedef struct {
 unsigned int order;
 bt_node * root;
 unsigned int (*value)(void * key);
        unsigned int (*key_size)(void * key);
        unsigned int (*data_size)(void * data);
 void (*print_key)(void * key);
}btree;

extern btree * btree_create(unsigned int order);
extern int btree_insert_key(btree * btree, bt_key_val * key_val);
extern int btree_delete_key(btree * btree,bt_node * subtree ,void * key);

extern void btree_destroy(btree * btree);
extern void * btree_get_max_key(btree * btree);
extern void * btree_get_min_key(btree * btree);
# 7 "btree.cilk" 2





static int recursive_flag =1;
static int parallel_flag =0;

struct timeval begin, end;
double time_spent;

typedef enum {left = -1,right = 1} position_t;

typedef struct {
 bt_node * node;
 unsigned int index;
}node_pos;

static void print_single_node(btree *btree, bt_node * node);
static bt_node * allocate_btree_node (unsigned int order);
static int free_btree_node (bt_node * node);

static node_pos get_btree_node(btree * btree,void * key);

static int delete_key_from_node(btree * btree, node_pos * node_pos);
static bt_node * merge_nodes(btree * btree, bt_node * n1, bt_key_val * kv ,bt_node * n2);
static void move_key(btree * btree, bt_node * node, unsigned int index, position_t pos);
static node_pos get_max_key_pos(btree * btree, bt_node * subtree);
static node_pos get_min_key_pos(btree * btree, bt_node * subtree);
static bt_node * merge_siblings(btree * btree, bt_node * parent,unsigned int index,
     position_t pos);
static void copy_key_val(btree * btree,bt_key_val * src, bt_key_val * dst);






btree * btree_create(unsigned int order) {
 btree * btree;
 btree = malloc(sizeof(*btree));
 btree->order = order;
 btree->root = allocate_btree_node(order);
 btree->root->leaf = true;
 btree->root->nr_active = 0;
 btree->root->next = ((void *)0);
 btree->root->level = 0;
 return btree;
}







static bt_node * allocate_btree_node (unsigned int order) {
        bt_node * node;


        node = (bt_node *)malloc(sizeof(bt_node));


        node->nr_active = 0;


        node->key_vals = (bt_key_val **)malloc(2*order*sizeof(bt_key_val*) - 1);


        node->children = (bt_node **)malloc(2*order*sizeof(bt_node*));


 node->leaf = true;


 node->level = 0;


 node->next = ((void *)0);

        return node;
}







static int free_btree_node (bt_node * node) {

        free(node->children);
        free(node->key_vals);
        free(node);

        return 0;
}
# 113 "btree.cilk"
static void btree_split_child(btree * btree, bt_node * parent,
    unsigned int index,
    bt_node * child) {
 int i = 0;
 unsigned int order = btree->order;

 bt_node * new_child = allocate_btree_node(btree->order);
 new_child->leaf = child->leaf;
 new_child->level = child->level;
 new_child->nr_active = btree->order - 1;


 for(i=0;i<order - 1;i++) {
  new_child->key_vals[i] = child->key_vals[i + order];
  if(!child->leaf) {
   new_child->children[i] =
    child->children[i + order];
  }
 }


 if(!child->leaf) {
  new_child->children[i] =
  child->children[i + order];
 }

 child->nr_active = order - 1;

 for(i = parent->nr_active + 1;i > index + 1;i--) {
  parent->children[i] = parent->children[i - 1];
 }
 parent->children[index + 1] = new_child;

 for(i = parent->nr_active;i > index;i--) {
  parent->key_vals[i] = parent->key_vals[i - 1];
 }

 parent->key_vals[index] = child->key_vals[order - 1];
 parent->nr_active++;
}
# 162 "btree.cilk"
static void btree_insert_nonfull (btree * btree, bt_node * parent_node,
    bt_key_val * key_val) {

 unsigned int key = btree->value(key_val->key);
 int i ;
 bt_node * child;
 bt_node * node = parent_node;

insert: i = node->nr_active - 1;
 if(node->leaf) {
  while(i >= 0 && key < btree->value(node->key_vals[i]->key)) {
   node->key_vals[i + 1] = node->key_vals[i];
   i--;
  }
  node->key_vals[i + 1] = key_val;
  node->nr_active++;
 } else {
  while (i >= 0 && key < btree->value(node->key_vals[i]->key)) {
   i--;
  }
  i++;
  child = node->children[i];

  if(child->nr_active == 2*btree->order - 1) {
   btree_split_child(btree,node,i,child);
   if(btree->value(key_val->key) >
    btree->value(node->key_vals[i]->key)) {
    i++;
   }
  }
  node = node->children[i];
  goto insert;
 }
}
# 205 "btree.cilk"
int btree_insert_key(btree * btree, bt_key_val * key_val) {
 bt_node * rnode;

 rnode = btree->root;
 if(rnode->nr_active == (2*btree->order - 1)) {
  bt_node * new_root;
  new_root = allocate_btree_node(btree->order);
  new_root->level = btree->root->level + 1;
  btree->root = new_root;
  new_root->leaf = false;
  new_root->nr_active = 0;
  new_root->children[0] = rnode;
  btree_split_child(btree,new_root,0,rnode);
  btree_insert_nonfull(btree,new_root,key_val);
 } else
  btree_insert_nonfull(btree,rnode,key_val);

        return 0;
}







static node_pos get_max_key_pos(btree * btree, bt_node * subtree) {
 node_pos node_pos;
 bt_node * node = subtree;

 while(true) {
  if(node == ((void *)0)) {
   break;
  }

  if(node->leaf) {
   node_pos.node = node;
   node_pos.index = node->nr_active - 1;
   return node_pos;
  } else {
   node_pos.node = node;
   node_pos.index = node->nr_active - 1;
   node = node->children[node->nr_active];
  }
 }
 return node_pos;
}







static node_pos get_min_key_pos(btree * btree, bt_node * subtree) {
 node_pos node_pos;
 bt_node * node = subtree;

 while(true) {
  if(node == ((void *)0)) {
   break;
  }

  if(node->leaf) {
   node_pos.node = node;
   node_pos.index = 0;
   return node_pos;
  } else {
   node_pos.node = node;
   node_pos.index = 0;
   node = node->children[0];
  }
 }
 return node_pos;
}
# 289 "btree.cilk"
static bt_node * merge_siblings(btree * btree, bt_node * parent, unsigned int index ,
     position_t pos) {
 unsigned int i,j;
 bt_node * new_node;
 bt_node * n1, * n2;

        if (index == (parent->nr_active)) {
               index--;
        n1 = parent->children[parent->nr_active - 1];
        n2 = parent->children[parent->nr_active];
        } else {
               n1 = parent->children[index];
        n2 = parent->children[index + 1];
        }


 new_node = allocate_btree_node(btree->order);
 new_node->level = n1->level;
 new_node->leaf = n1->leaf;

 for(j=0;j<btree->order - 1; j++) {
  new_node->key_vals[j] = n1->key_vals[j];
  new_node->children[j] = n1->children[j];
 }

 new_node->key_vals[btree->order - 1] = parent->key_vals[index];
 new_node->children[btree->order - 1] = n1->children[btree->order - 1];

 for(j=0;j<btree->order - 1; j++) {
  new_node->key_vals[j + btree->order] = n2->key_vals[j];
  new_node->children[j + btree->order] = n2->children[j];
 }
 new_node->children[2*btree->order - 1] = n2->children[btree->order - 1];

 parent->children[index] = new_node;

 for(j = index;j<parent->nr_active;j++) {
  parent->key_vals[j] = parent->key_vals[j + 1];
  parent->children[j + 1] = parent->children[j + 2];
 }

 new_node->nr_active = n1->nr_active + n2->nr_active + 1;
 parent->nr_active--;

 for(i=parent->nr_active;i < 2*btree->order - 1; i++) {
  parent->key_vals[i] = ((void *)0);
 }

 free_btree_node(n1);
 free_btree_node(n2);

 if (parent->nr_active == 0 && btree->root == parent) {
  free_btree_node(parent);
  btree->root = new_node;
  if(new_node->level)
   new_node->leaf = false;
  else
   new_node->leaf = true;
 }

 return new_node;
}
# 360 "btree.cilk"
static void move_key(btree * btree, bt_node * node, unsigned int index, position_t pos) {
 bt_node * lchild;
 bt_node * rchild;
 unsigned int i;

 if(pos == right) {
  index--;
 }
 lchild = node->children[index];
 rchild = node->children[index + 1];


 if(pos == left) {
  lchild->key_vals[lchild->nr_active] = node->key_vals[index];
  lchild->children[lchild->nr_active + 1] = rchild->children[0];
  rchild->children[0] = ((void *)0);
  lchild->nr_active++;

  node->key_vals[index] = rchild->key_vals[0];
  rchild->key_vals[0] = ((void *)0);

  for(i=0;i<rchild->nr_active - 1;i++) {
   rchild->key_vals[i] = rchild->key_vals[i + 1];
   rchild->children[i] = rchild->children[i + 1];
  }
  rchild->children[rchild->nr_active - 1] =
    rchild->children[rchild->nr_active];
  rchild->nr_active--;
 } else {

  for(i=rchild->nr_active;i > 0 ; i--) {
   rchild->key_vals[i] = rchild->key_vals[i - 1];
   rchild->children[i + 1] = rchild->children[i];
  }
  rchild->children[1] = rchild->children[0];
  rchild->children[0] = ((void *)0);

  rchild->key_vals[0] = node->key_vals[index];

  rchild->children[0] = lchild->children[lchild->nr_active];
  lchild->children[lchild->nr_active] = ((void *)0);

  node->key_vals[index] = lchild->key_vals[lchild->nr_active - 1];
  lchild->key_vals[lchild->nr_active - 1] = ((void *)0);

  lchild->nr_active--;
  rchild->nr_active++;
 }
}







static bt_node * merge_nodes(btree * btree, bt_node * n1, bt_key_val * kv,
                                                bt_node * n2) {
 bt_node * new_node;
 unsigned int i;

 new_node = allocate_btree_node(btree->order);
 new_node->leaf = true;

 for(i=0;i<n1->nr_active;i++) {
  new_node->key_vals[i] = n1->key_vals[i];
                new_node->children[i] = n1->children[i];
 }
        new_node->children[n1->nr_active] = n1->children[n1->nr_active];
        new_node->key_vals[n1->nr_active] = kv;

 for(i=0;i<n2->nr_active;i++) {
  new_node->key_vals[i + n1->nr_active + 1] = n2->key_vals[i];
                new_node->children[i + n1->nr_active + 1] = n2->children[i];
 }
        new_node->children[2*btree->order - 1] = n2->children[n2->nr_active];

        new_node->nr_active = n1->nr_active + n2->nr_active + 1;
        new_node->leaf = n1->leaf;
        new_node->level = n1->level;

 free_btree_node(n1);
 free_btree_node(n2);

 return new_node;
}
# 455 "btree.cilk"
int delete_key_from_node(btree * btree, node_pos * node_pos) {
 unsigned int keys_max = 2*btree->order - 1;
 unsigned int i;
 bt_key_val * key_val;
 bt_node * node = node_pos->node;

 if(node->leaf == false) {
  return -1;
 }

 key_val = node->key_vals[node_pos->index];

 for(i=node_pos->index;i< keys_max - 1;i++) {
  node->key_vals[i] = node->key_vals[i + 1];
 }

 if(key_val->key) {
  free(key_val->key);
                key_val->key = ((void *)0);
 }

 if(key_val->val) {
  free(key_val->val);
                key_val->val = ((void *)0);
 }

 node->nr_active--;

 if(node->nr_active == 0 ) {
  free_btree_node(node);
 }
 return 0;
}
# 498 "btree.cilk"
int btree_delete_key(btree * btree,bt_node * subtree,void * key) {
 unsigned int i,index;
 bt_node * node = ((void *)0), * rsibling, *lsibling;
 bt_node * comb_node, * parent;
 node_pos sub_node_pos;
 node_pos node_pos;
 bt_key_val * key_val, * new_key_val;
 unsigned int kv = btree->value(key);

 node = subtree;
 parent = ((void *)0);

del_loop:for (i = 0;;i = 0) {


            if(!node->nr_active)
                return -1;




     while (i < node->nr_active && kv >
       btree->value(node->key_vals[i]->key) ) {
      i++;
     }
     index = i;


     if(i < node->nr_active &&
   kv == btree->value(node->key_vals[i]->key)) {
   break;
     }
            if(node->leaf)
                return -1;


     parent = node;


     node = node->children[i];


            if (node == ((void *)0))
                return -1;

            if (index == (parent->nr_active)) {
                lsibling = parent->children[parent->nr_active - 1];
      rsibling = ((void *)0);
            } else if (index == 0) {
                lsibling = ((void *)0);
                rsibling = parent->children[1];
            } else {
         lsibling = parent->children[i - 1];
      rsibling = parent->children[i + 1];
            }

     if (node->nr_active == btree->order - 1 && parent) {


  if (rsibling && (rsibling->nr_active > btree->order - 1)) {
   move_key(btree,parent,i,left);
  } else


  if (lsibling && (lsibling->nr_active > btree->order - 1)) {
   move_key(btree,parent,i,right);
  } else

         if(lsibling && (lsibling->nr_active == btree->order - 1)) {
          node = merge_siblings(btree,parent,i,left);
  } else

         if(rsibling && (rsibling->nr_active == btree->order - 1)) {
          node = merge_siblings(btree,parent,i,right);
  }
     }
        }




 if(node->leaf && (node->nr_active > btree->order - 1)) {
  node_pos.node = node;
  node_pos.index = index;
  delete_key_from_node(btree,&node_pos);
  return 0;
 }



 if(node->leaf && (node == btree->root)) {
  node_pos.node = node;
  node_pos.index = index;
  delete_key_from_node(btree,&node_pos);
  return 0;
 }



 if(node->leaf == false) {
  if(node->children[index]->nr_active > btree->order - 1 ) {
   sub_node_pos = get_max_key_pos(btree,node->children[index]);
                        key_val = sub_node_pos.node->key_vals[sub_node_pos.index];

                        new_key_val = (bt_key_val *)malloc(sizeof(bt_key_val));
                        copy_key_val(btree,key_val,new_key_val);
          node->key_vals[index] = new_key_val;

                        btree_delete_key(btree,node->children[index],key_val->key);
   if(sub_node_pos.node->leaf == false) {
                                printf("Not leaf\n");
                        }
  } else if ((node->children[index + 1]->nr_active > btree->order - 1) ) {
   sub_node_pos =
                                get_min_key_pos(btree,node->children[index + 1]);
                        key_val = sub_node_pos.node->key_vals[sub_node_pos.index];

                        new_key_val = (bt_key_val *)malloc(sizeof(bt_key_val));
                        copy_key_val(btree,key_val,new_key_val);
          node->key_vals[index] = new_key_val;

                        btree_delete_key(btree,node->children[index + 1],key_val->key);
   if(sub_node_pos.node->leaf == false) {
                                printf("Not leaf\n");
                        }

  } else if (
   node->children[index]->nr_active == btree->order - 1 &&
   node->children[index + 1]->nr_active == btree->order - 1) {

   comb_node = merge_nodes(btree,node->children[index],
                                node->key_vals[index],
    node->children[index + 1]);
   node->children[index] = comb_node;

   for(i=index + 1;i<node->nr_active;i++) {
    node->children[i] = node->children[i + 1];
    node->key_vals[i - 1] = node->key_vals[i];
   }
   node->nr_active--;
                        if (node->nr_active == 0 && btree->root == node) {
                                free_btree_node(node);
                                btree->root = comb_node;
                        }
                        node = comb_node;
                        goto del_loop;
  }
          }






 if(node->leaf && (node->nr_active > btree->order - 1)) {
       node_pos.node = node;
       node_pos.index = index;
       delete_key_from_node(btree,&node_pos);
 }

        return 0;
}







node_pos get_btree_node(btree * btree,void * key) {
 node_pos kp;
 unsigned int key_val = btree->value(key);
 bt_node * node;
 unsigned int i = 0;

 node = btree->root;


 for (;;i = 0) {




     while (i < node->nr_active && key_val >
       btree->value(node->key_vals[i]->key) ) {
      i++;
     }


     if(i < node->nr_active &&
   key_val == btree->value(node->key_vals[i]->key)) {
      kp.node = node;
      kp.index = i;
      return kp;
     }



     if(node->leaf) {
      return kp;
     }


     node = node->children[i];
 }


}






void btree_destroy(btree * btree) {
       int i = 0;
       unsigned int current_level;

       bt_node * head, * tail, * node;
       bt_node * child, * del_node;

       node = btree->root;
       current_level = node->level;
       head = node;
       tail = node;

       while(true) {
               if(head == ((void *)0)) {
                       break;
               }
               if (head->level < current_level) {
                       current_level = head->level;
               }

               if(head->leaf == false) {
                       for(i = 0 ; i < head->nr_active + 1; i++) {
                               child = head->children[i];
                               tail->next = child;
                               tail = child;
                               child->next = ((void *)0);
                       }
               }
               del_node = head;
               head = head->next;
               free_btree_node(del_node);
       }

}







bt_key_val * btree_search(btree * btree,void * key) {

 bt_key_val * key_val = ((void *)0);
 node_pos kp = get_btree_node(btree,key);

 if(kp.node) {
  key_val = kp.node->key_vals[kp.index];
 }
 return key_val;
}







static void copy_key_val(btree * btree, bt_key_val * src, bt_key_val * dst) {
        unsigned int keysize;
        unsigned int datasize;

        keysize = btree->key_size(src->key);
        dst->key = (void *)malloc(keysize);
        bcopy(src->key,dst->key,keysize);

        if(src->val) {
                datasize = btree->data_size(src->val);
                dst->val = (void *)malloc(datasize);
                bcopy(src->val,dst->val,datasize);
        }

}






void * btree_get_max_key(btree * btree) {
 node_pos node_pos;
 node_pos = get_max_key_pos(btree,btree->root);
 return node_pos.node->key_vals[node_pos.index]->key;
}






void * btree_get_min_key(btree * btree) {
 node_pos node_pos;
 node_pos = get_min_key_pos(btree,btree->root);
 return node_pos.node->key_vals[node_pos.index]->key;
}
# 874 "btree.cilk"
unsigned int value(void * key) {
    return *((int *)key);
}

unsigned int keysize(void * key) {
        return sizeof(int);
}

unsigned int datasize(void * data) {
        return sizeof(int);
}

void usage(){}

cilk int main(int argc, char* argv[])
{
    int i = 0;
    int c;
    btree * tree;
    bt_key_val * kv;

    int count;
    int order;
    int * values;
    int num_lookups;

    srandom(0);

    count = 134217728;
    order = 5;
    num_lookups = 100;

    while (1) {
        static struct option long_options[] =
            {

                {"nonrecursive", 0, &recursive_flag, 0},
                {"parallel", 0, &parallel_flag, 1},




                {"count", 1, 0, 'c'},
                {"order", 1, 0, 'o'},
                {"num_lookups", 1, 0, 'n'},
                {0, 0, 0, 0}
            };

        int option_index = 0;

        c = getopt_long (argc, argv, "c:o:n:",
                         long_options, &option_index);


        if (c == -1)
            break;

        switch (c) {
            case 0:

                if (long_options[option_index].flag != 0)
                    break;
                printf ("option %s", long_options[option_index].name);
                if (optarg)
                    printf (" with arg %s", optarg);
                printf ("\n");
                break;

            case 'c':
                printf ("option -c with value `%s'\n", optarg);
                count = atoi(optarg);
                break;

            case 'o':
                printf ("option -o with value `%s'\n", optarg);
                order = atoi(optarg);
                break;

            case 'n':
                printf ("option -n with value `%s'\n", optarg);
                num_lookups = atoi(optarg);

            case '?':

                break;

            default:
                usage ();
        }
    }


    if (optind < argc) {
        printf ("non-option ARGV-elements: ");
        while (optind < argc) {
            printf ("%s ", argv[optind++]);
        }
        putchar ('\n');
    }
    values = (int *)malloc(num_lookups*sizeof(int));

    tree = btree_create(order);
        tree->value = value;
        tree->key_size = keysize;
        tree->data_size = datasize;

    for (i=0;i<count;i++) {
        kv = (bt_key_val*)malloc(sizeof(*kv));
        kv->key = malloc(sizeof(int));
        *(int *)kv->key = i;
        kv->val = malloc(sizeof(int));
        *(int *)kv->val = i;
        btree_insert_key(tree,kv);
    }

    for(i = 0;i<num_lookups;i++) {
        values[i] = random()%count;
    }

    gettimeofday(&begin, ((void *)0));

    for (i= 0; i<num_lookups;++i) {
        btree_search(tree, &values[i]);
    }

    gettimeofday(&end, ((void *)0));
    time_spent = end.tv_sec*1000000+end.tv_usec
        -(begin.tv_sec*1000000+begin.tv_usec);

    printf("avg_lookup(us): %f\n", time_spent/num_lookups);

    free(values);
    btree_destroy(tree);

    return 0;
}
