#define USE_LOCKS
#include <getopt.h>
#include <string.h>
#include <stdio.h>

#include "ds/dynArray.cilk"
#include "util/timer.h"

void usage() {
  printf("use default arguments");
}

cilk int main(int argc, char **argv)
{
	
	dyn_array* test_array;
	int i;
	
	int test_size = 10;
	int verbose = 0;
	int option;
	int opt_index;

	struct option all_options[] ={
     {"size",required_argument,0,'s'},
     {"verbose", no_argument,0,'v'}
    };
	
	while((option = getopt_long(argc,argv,"s:v",all_options,&opt_index))!=-1){
     
	switch(option){
      case 0:
		if (all_options[opt_index].flag!=0){
		  break;
		}
		else{
		  printf("Invalid option.\n");
		  break;
		}
      case 's':
	test_size=atoi(optarg);
	break;
      case 'v':
	verbose=1;
	break;
      default:
	usage();
	return -1;
      }
    }
	//Processes arugment (no -s option) also as size.
	if (argc==1 || optind != argc-1){
	  usage();
	  return -1;
	} else {
	  test_size=atoi(argv[optind]);
	}
	
	test_array = create_array();

	//Perform Tests--------------------------
	#ifdef USE_LOCKS
	if (verbose) {

      printf("begin test - USE_LOCKS is on\n");
    }
	#else
	if (verbose) {
      printf("begin test - USE_LOCKS is not on - It should be\n");
    }
	#endif
	
	startTimer();
	for(i=0; i<test_size; ++i)
	{
		spawn lock_push_back(test_array, i);
	}
	sync;
	stopTimer();
	
	if (verbose){
      printf("Locks. Size %d. \n", test_size);
    }
    printf("%lf\n", getWallTime());
	
	//print_array(test_array);
	
	delete_array(test_array);
	return 0;
}

