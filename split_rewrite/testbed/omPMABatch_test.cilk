#include <getopt.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

#include "util/timer.h"
#include "util/defaults.h"

#include "ds/omPMA.cilk"

#define SIZE 32
#define TSIZE 20

extern void printBatcherStats();

void initializeTest(pArray* ds, int testSize, pItem** result){
  int i;
  for (i=0;i<testSize;i++){
    result[i]=pItem_create(NULL);
    if (result[i]==NULL){
      printf("out of memory?\n");
    }
    else {
      //      printf("%d\n",i);
      pArray_insert(ds,NULL,result[i]);
    }
  }
}

cilk void parallelInsert(pArray* ds, pItem** input, pItem** place, int start, int end){
  int i;
  if (end-start <=PARFOR_THRESHOLD){
    for (i=start;i<end;i++){
      spawn pArray_parInsert(ds,place[i],input[i]);
    }
    sync;
  }
  else {
    i=start+(end-start)/2;
    spawn parallelInsert(ds,input,place,i+1,end);
    spawn parallelInsert(ds,input,place,start,i);
    spawn pArray_parInsert(ds,place[i],input[i]);
    sync;
  }
}


cilk void runLockTest(pArray* ds, pItem** input, pItem** setup, int size){
  spawn parallelInsert(ds,input,setup,0,size);
  sync;
}

void usage() {
  printf("use arguments");
}

cilk int main(int argc, char** argv) {
    int testSize=20;
    int verbose=0;
    int i;
    pItem** setup;
    pItem** testInputs;
    int opt_index;
    int option;
    pArray* array;
    struct option all_options[] ={
      {"size",required_argument,0,'s'},
      {"verbose", no_argument,0,'v'}
    };
    while((option = getopt_long(argc,argv,"s:v",all_options,&opt_index))!=-1){
      switch(option){
      case 0:
	if (all_options[opt_index].flag!=0){
	  break;
	}
	else{
	  printf("Invalid option.\n");
	  break;
	}
      case 's':
	testSize=atoi(optarg);
	break;
      case 'v':
	verbose=1;
	break;
      default:
	usage();
	return -1;
      }
    }
    	//Processes arugment (no -s option) also as size.
	if (argc==1 || optind != argc-1){
	  usage();
	  return -1;
	} else {
	  testSize=atoi(argv[optind]);
	}

    array  = pArray_create(testSize*4);
    setup = calloc(testSize,sizeof(pItem*));
    initializeTest(array, testSize, setup);
    testInputs = calloc(testSize,sizeof(pItem*));
    for (i=0;i<testSize;i++){
      testInputs[i]=pItem_create(NULL);
      if (testInputs[i]==NULL){
	printf("out of memory\n");
      }
    }
    //Begin running tests and start the timer. 
   if (verbose) {
      printf("begin test\n");
    }
    startTimer();
    spawn runLockTest(array,testInputs, setup, testSize);
    sync;
    stopTimer();
    if (verbose){
      printf("Batch. Size %d. \n",testSize);
//      pArray_print(array);
    }
    printf("%lf\n", getWallTime());
    return 1;
}
