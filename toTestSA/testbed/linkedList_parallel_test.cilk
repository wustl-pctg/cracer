#include "ds/linkedList.cilkh"

#include <cilk-lib.cilkh>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>


#define NUM_INSERTS 3

void printList(LinkedList * list) {
	Node * n;

	n = list->head;
	printf("Head->");
	while (n != NULL){
	printf("%s->", n->name);
	n = n->next;
	}

	printf("Tail\n");
}


cilk int main(int argc, char **argv)

{
	LLInsertRecord ** irArray = (LLInsertRecord **)malloc(NUM_INSERTS * sizeof(LLInsertRecord*));
	LLInsertRecord * tmpIR1 = malloc(sizeof(LLInsertRecord));
	LLInsertRecord * tmpIR2 = malloc(sizeof(LLInsertRecord));
	LLInsertRecord * tmpIR3 = malloc(sizeof(LLInsertRecord));
	LinkedList * list;
	Node * n, *n2, *n3, *n4;
	int x = 0;

	n =(Node *) malloc(sizeof(Node));
	n2 =(Node *) malloc(sizeof(Node));
	n3 =(Node *) malloc(sizeof(Node));
	n4 =(Node *) malloc(sizeof(Node));

	n->name  = "n1";
	n2->name = "n2";
	n3->name = "n3";
	n4->name = "n4";

	list =createLinkedList();

	//empty
//	printList(list);
	spawn appendNode(list, n);
	sync;


//	printf("%s\n", "Should be one node:");
//	printList(list);

	irArray[0] = tmpIR1;
	irArray[1] = tmpIR2;
	irArray[2] = tmpIR3;

	(irArray[0])->x = n;
	(irArray[0])->y = n2;
	(irArray[1])->x = n;
	(irArray[1])->y = n3;
	(irArray[2])->x = n;
	(irArray[2])->y = n4;

	spawn batchInsertPar(list, n, n2);
	spawn batchInsertPar(list, n, n3);
	spawn batchInsertPar(list, n, n4);

		//spawn insertPar(list, irArray, 3, NULL);

	//spawn atomicInsert(list, irArray[0]);
	//spawn atomicInsert(list, irArray[2]);
	//spawn atomicInsert(list, irArray[1]);

	

	sync;
//	printList(list);
	x += spawn order(list, n3, n4);
//	(x)?printf("n3 before n4\n"):printf("n3 not before n4\n");
	(x)?assert(0):assert(1);
	
	cleanUp(list);
	free(irArray);
	//tmpIR freed

  	return 0;
}
