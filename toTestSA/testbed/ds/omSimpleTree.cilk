#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <cilk-lib.cilkh>
#define VOID_DATA (int)-INFINITY
#define STARTING_MAX_LABEL 100
#define PARALLEL_CUTOFF 100

/**
 *  \file omSimpleTree.cilk
 *  \brief This file contains an Order Maintenance structure that supports lock and batch inserts. It is implemented using a linked listand and unbalanced binary search tree. Each item in the liked list is also a node in the tree. A layer of indirection is used to improve performance.
 *	The related tests are omTreeLock_test.cilk and omTreeBatch_test.cilk
 */

//TODO: (Things that I havent started) (search down to find other TODO:s)
	//Functions for freeing things to avoid memory leaks
	//Delete()	//Not really essential to testing
	//Order()	//Trivial to implement - compare superlist nodes, then if they are the same, compare sublist items

//-----------Structs--------------------------------
enum bool{false, true};
typedef enum bool bool;

//! Used in order to pass insert/order/delete parameters through Batchify
struct item_pair
{
	struct indirection_item* itemA;
	struct indirection_item* itemB;
};
typedef struct item_pair item_pair;

//!	The layer of indirection.
/*! Implemented as a double-linked list that keeps labels in order
*/
struct indirection_item
{
	int key;	//!< The integer label of the item, compared in order to determine order
	struct indirection_item *next, *prev;	//!< Pointers for the linked list
	struct nodeOM *parent;	//!<Pointer to the parent of the entire list
	void* data;		//!<The actual data held by the OM structure
};
typedef struct indirection_item itemOM;

//! Nodes in a binary search tree that are also links in a list
struct nodeOM
{
	int key;	//!< The label of the item, compared in order to determine order
	int count;	//!< Nodes in the subree, including itself
	int size;	//!< The number of itemOMs in the node's indirection list
	struct nodeOM *left, *right;	//!< Pointers to the node's children in the tree
	struct nodeOM *next, *prev;		//!< Pointers for the linked list
	struct nodeOM *parent;			//!< Pointer to the node's parent in the tree
	struct indirection_item *sublist;	//!< Pointer to the first item in the indirection list
	#ifdef USE_LOCKS
	Cilk_lockvar lock;	//!< A lock used for lock_insert(). The macro USE_LOCKS must be defined. This lock is used to lock the node's sublist. A seperate lock is used to lock the entire OM
	#endif
	bool is_marked;
};
typedef struct nodeOM nodeOM;

//! Contains information about the entire OM structure
struct order_maintenance_structure
{
	struct nodeOM *root;	//!< Pointer to the root node of the binary search tree
	int label_space;		//!< The maximum label that can be assigned to a node. Doubles when the density is too high.
	int countOM;		//!< The total number of itemOMs in the data structure
	#ifdef USE_LOCKS
		Cilk_lockvar lock;	//!< A lock for the entire data structure, used in lock_insert_node(). The macro USE_LOCKS must be defined.
	#endif
};
typedef struct order_maintenance_structure OM;

//------------Declarations------------------------------
	//OM Functions
		//Sublist functions
cilk void parallel_for_batch_insert(OM* current_OM, item_pair** item_pair_array, int start, int end);	//PUBLIC
cilk void batch_insert_iterator(OM* current_OM, item_pair* insert_pair);
cilk void batch_insert(OM* current_OM, void* data, size_t size, void* results);
cilk void parallel_for_insert_and_label_item(OM* current_OM, item_pair** pair_array, int start, int end);
cilk void insert_and_label_item(OM* current_OM, item_pair* insert_pair);
cilk void lock_insert(OM* current_OM, itemOM* existing_item, itemOM* insert_item);		//PUBLIC
		//Superlist functions
cilk void batch_insert_node(OM* current_OM, nodeOM** existing_array, nodeOM** insert_array, size_t size);
cilk void parallel_for_relabel_tree(OM* current_OM, nodeOM** existing_array, int start, int end);
cilk void parallel_for_insert_and_label(OM* current_OM, nodeOM** existing_array, nodeOM** insert_array, int start, int end);
cilk void insert_and_label(OM* current_OM, nodeOM* existing_node, nodeOM* insert_node);
cilk void parallel_for_tree_insert(OM* current_OM, nodeOM** insert_array, int start, int end);
cilk void lock_insert_node(OM* current_OM, nodeOM* existing_node, nodeOM* insert_node);
nodeOM* recursive_find_low_density(nodeOM* current_node, int key, int min, int max);
cilk void recursive_relabel_subtree(OM* current_OM, nodeOM* current_node, int max, int min, int interval);

	//Tree Functions
cilk void tree_insert_cilk(OM* tree, nodeOM* z);
void tree_insert(OM* tree, nodeOM* z);
void tree_delete(OM* tree, nodeOM* z);
void transplant(OM* tree, nodeOM* u, nodeOM* v);
nodeOM* tree_minimum(nodeOM* x);
nodeOM* tree_maximum(nodeOM* x);
void print_OM(OM* tree);
void print_sublist(nodeOM* current_node);
void recursive_print_tree(OM* tree, nodeOM* current_node, int depth);

	//Initializations
item_pair* create_item_pair(itemOM* itemA, itemOM* itemB);	//PUBLIC
itemOM* create_itemOM();	//PUBLIC
nodeOM* create_nodeOM();
OM* create_OM(itemOM** array, int size);	//Sorted array	//PUBLIC
nodeOM* recursive_create_tree(nodeOM** array, int size, int min, int max);


//---------------------Item/Sublist Functions-------------------------------
//TODO: indirection layer for batch insert - Lots needs to be finished here, it became very difficult
//TODO: Change most of the commented out functions. A different approach to this implementation may be needed
//VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV - I Had lots of trouble with this - VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

/**\brief A parallel for loop to call Batchify on batch_insert()
 *  \param current_OM      The OM to pass to Batchify
 *  \param item_pair_array An array of item pairs to use as parameters for insert()
 *  \param start            An interator to help with the parallel for loop (Pass in 0)
 *  \param end             An iterator to help with the parallel for loop (Pass in test_size)
 *  \sa batch_insert_iterator(), batch_insert()
 */
/*cilk void parallel_for_batch_insert(OM* current_OM, item_pair** item_pair_array, int start, int end)
{	
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn batch_insert_iterator(current_OM, item_pair_array[start]);
		}
	}
	else
	{
		spawn parallel_for_batch_insert(current_OM, existing_array, start, middle);
		spawn parallel_for_batch_insert(current_OM, existing_array, middle+1, end);
		spawn batch_insert_iterator(current_OM, item_pair_array[middle]);
	}
}*/

/**\brief A helper function to call batchify on batch_insert()
 *  \param current_OM  The OM to pass to batchify
 *  \param insert_pair The pair to use as parameters for insert()
 *  \sa parallel_for_batch_insert(), batch_insert()
 */
/*cilk void batch_insert_iterator(OM* current_OM, item_pair* insert_pair)
{
	Cilk_batchify(_cilk_ws, batch_insert, current_OM, insert_pair, sizeof(item_pair), NULL);
}*/

/** \brief The insert function called by batchify
 *  
 *  \param current_OM The order maintenance structure to modify
 *  \param data       A void pointer to the data (given by batchify)
 *  \param size       The size of the data array
 *  \param results    Pass in a NULL pointer
 *  \sa batch_insert_node()
 */
/*cilk void batch_insert(OM* current_OM, void* data, size_t size, void* results)
{
	item_pair** pair_array = (item_pair**)data;
	nodeOM** existing_array;
	nodeOM** insert_array;
	int new_size;
	//Insert into list, increment countOM, no relabeling should be needed
	current_OM->countOM += size;
	spawn parallel_for_insert_and_label_item(current_OM, pair_array, 0, size);
	sync;
	
	//If list is too large, split and insert a new node
	spawn parallel_for_find_splits(current_OM, pair_array, 0, size);
	sync;
	spawn parallel_for_find_size(pair_array, &new_size, 0, size);	//TODO: Implement a way to get the number of new nodes that need to be created due to splits
	sync;
	spawn parallel_for_create_new_nodes(current_OM, pair_array, existing_array, insert_array, 0, size);		//TODO: Find a way to make this more simple, it is supposed to create new nodes and put them in an array, and also make a corresponding array of existing nodes
	sync;
	if(new_size != 0)
	{
		spawn batch_insert_node(current_OM, existing_array, insert_array, new_size);	//TODO: Make existing and insert arrays from pair array - The above three parallel for loops attempt to do this, became very complicated, unfinished
		sync;
	}
	spawn parallel_for_split(current_OM, pair_array, 0, size);	//TODO: Implement this, it should be similar to the split part of lock_insert()
	sync;


}*/

/*cilk void parallel_for_create_new_nodes(OM* current_OM, item_pair** pair_array, nodeOM*** existing_array, nodeOM*** insert_array, int* new_size, int start, int end)	//Probably should be done differently
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end; ++start)
		{
			spawn create_new_nodes(current_OM, pair_array[start],);
		}
	}
	else
	{
		spawn parallel_for_create_new_nodes(current_OM, pair_array, existing_array, insert_array, new_size, start, middle);
		spawn parallel_for_create_new_nodes(current_OM, pair_array, existing_array, insert_array, new_size, middle+1, end);
		spawn create_new_nodes(current_OM, pair_array[middle]);
	}
}*/

/*cilk void parallel_for_find_size(item_pair** pair_array, int* new_size, int start, int end)	//Should be done differently
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end; ++start)
		{
			if(pair_array[start]->parent
		}
	}
	else
	{
		spawn parallel_for_find_splits(current_OM, pair_array, start, middle);
		spawn parallel_for_find_splits(current_OM, pair_array, middle+1, end);
		spawn find_splits(current_OM, pair_array[middle]);
	}
}*/

/*cilk void parallel_for_find_splits(OM* current_OM, item_pair** pair_array, int start, int end)	//Sould be done differently
{	
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end; ++start)
		{
			spawn find_splits(current_OM, pair_array[start]);
		}
	}
	else
	{
		spawn parallel_for_find_splits(current_OM, pair_array, start, middle);
		spawn parallel_for_find_splits(current_OM, pair_array, middle+1, end);
		spawn find_splits(current_OM, pair_array[middle]);
	}
}*/

/*cilk void find_splits(OM* current_OM, item_pair* insert_pair)	//Sould be done differently
{
	if(insert_pair->itemA->parent->size >= 2*log2(current_OM->countOM))
	{
		insert_pair->itemA->parent->is_marked = true;	//TODO: Make this compare and swap
	}
}*/

/**\brief Insert an array of items into the layer of indirection in parallel, increment the size of their parent, and label
 *  \param current_OM The OM to insert into
 *  \param pair_array The array of insert pairs to use
 *  \param start      An interator to help with the parallel for loop (Pass in 0)
 *  \param end        An iterator to help with the parallel for loop (Pass in test_size)
 *  \sa insert_and_label_item(), batch_insert()
 */
/*cilk void parallel_for_insert_and_label_item(OM* current_OM, item_pair** pair_array, int start, int end)
{	
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn insert_and_label_item(current_OM, pair_array[start]);
		}
	}
	else
	{
		spawn parallel_for_batch_insert(current_OM, pair_array, start, middle);
		spawn parallel_for_batch_insert(current_OM, pair_array, middle+1, end);
		spawn insert_and_label_item(current_OM, pair_array[middle]);
	}
}*/

/**\brief Use an item_pair to insertan item into the layer of indirection, label it, and icnrement the size of its parent
 *  \param current_OM  The OM to insert into
 *  \param insert_pair The existing_item and insert_item pair
 *  \sa parallel_for_insert_and_label_item(), batch_insert()
 */
/*cilk void insert_and_label_item(OM* current_OM, item_pair* insert_pair)
{
	itemOM* insert_item = insert_pair->itemB;
	itemOM* existing_item = insert_pair_>itemA;
	
	insert_item->parent = existing_item->parent;
	insert_item->next = existing_item->next;
	insert_item->prev = existing_item;
	insert_item->prev->next = insert_item;
	if(insert_item->next != NULL)
	{
		insert_Item->next->prev = insert_item;
		insert_item->key = floor((insert_item->prev->key + insert_item->next->key)/2);
	}
	else
	{
		insert_item->key = floor((insert_item->prev->key + current_OM->countOM)/2);
	}
	existing_item->parent->size++;	//TODO: Some sort of compare and swap thing to avoid problems with this?
}*/

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Lots of trouble with the above^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/** \brief An function that uses locks to allow one item to be inserted at a time in each sublist
 *  \param current_OM    The OM to modify
 *  \param existing_item An existing item in the list
 *  \param insert_item   An item to insert after existing item in the list
 *  \sa lock_insert_node()
 */
cilk void lock_insert(OM* current_OM, itemOM* existing_item, itemOM* insert_item)
{
	nodeOM* lock_placeholder;
	nodeOM *new_node, *old_node;
	itemOM* temp;
	int i, increment;
	if(existing_item == NULL || insert_item == NULL){
		printf("Error: an Item is NULL\n");
		return;
	}
	//printf("Lock\n");
	#ifdef USE_LOCKS
	Cilk_lock(existing_item->parent->lock);
	lock_placeholder = existing_item->parent;
	#endif
	//printf("---------------------\n");
	//print_sublist(existing_item->parent);
	
	//Insert into list, increment countOM, no relabeling should be needed
	//printf("Insert into list\n");
	insert_item->parent = existing_item->parent;
	insert_item->next = existing_item->next;
	insert_item->prev = existing_item;
	insert_item->prev->next = insert_item;
	if(insert_item->next != NULL)
	{
		//printf("\tinsert_item->next == NULL\n");
		insert_item->next->prev = insert_item;
		insert_item->key = floor((insert_item->prev->key + insert_item->next->key)/2);
	}
	else
	{
		//printf("\tinsert_item->next != NULL\n");
		insert_item->key = floor((insert_item->prev->key + current_OM->countOM)/2);	//Count OM is labelspace?
	}
	existing_item->parent->size++;
	current_OM->countOM++;
	//printf("Done inserting\n");
	//If list is too large, split and insert a new node
	if(existing_item->parent->size >= 2*log2(current_OM->countOM))
	{
		//printf("Split\n");
		new_node = create_nodeOM();
		old_node = existing_item->parent;
		//printf("Old_node->size: %d\n",old_node->size);
		spawn lock_insert_node(current_OM, old_node, new_node);
		//Split lists and set up new node
		
		temp = old_node->sublist;
		
		increment = current_OM->countOM/(old_node->size/2);
		for(i=0; i<floor(old_node->size/2); ++i)	//First half of list
		{
			if(temp == NULL) printf("Temp is null\n");
			temp->key = increment*i;
			temp = temp->next;
		}	
		old_node->size = i;
		temp->prev->next = NULL;
		temp->prev = NULL;
		new_node->sublist = temp;
		for(i=0;i<old_node->size+1; ++i)	//Second half of list
		{
			if(temp == NULL)
			{	
				break;
			}
			temp->key = increment*i;
			temp->parent = new_node;
			temp = temp->next;
		}
		new_node->size = i;
	}
	
	//Release lock on list
	//printf("Unlock\n");
	#ifdef USE_LOCKS
	Cilk_unlock(lock_placeholder->lock);
	#endif
}


//---------------------Node/Superlist Functions----------------------------
/**\brief Insert several nodes into the structure at once
 *  \param current_OM     The OM to modify
 *  \param existing_array An array of existing nodes
 *  \param insert_array   An array of nodes to insert after the corresponding nodes from existing_array
 *  \param size           The size of the existing and insert arrays
 *  \sa insert_node()
 */
/*cilk void batch_insert_node(OM* current_OM, nodeOM** existing_array, nodeOM** insert_array, size_t size)	//Sorted arrays
{
	nodeOM** temp_array = malloc(sizeof(nodeOM*)*size);
	//Relabel tree to create space
	spawn parallel_for_find_low_density(current_OM, existing_array, temp_array, 0, size);	//TODO: Set up so that the same area wont be chosen twice? I havent figured out how to do this in log(n) time yet
	sync;
	spawn parallel_for_relabel_tree(current_OM, existing_array, 0, size);	//TODO: Make method of relabeling correspond to method of finding low density.
	sync;
	
	//Insert nodes into lists and label
	spawn parallel_for_insert_and_label(current_OM, existng_array, insert_array, 0, size);
	sync;
	
	//Insert nodes into tree	
	spawn parallel_for_tree_insert(current_OM, insert_array, 0, size);	//TODO: set up to increment count, use a compare and swap?
	sync;
	
	free(temp_array);
}*/

/*cilk void parallel_for_find_low_density(OM* current_OM, nodeOM** existing_array, nodeOM** temp_array, int start, int end)
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			temp_array[start] = spawn recursive_find_low_density_cilk(current_OM, existing_array[start]->key, VOID_DATA, VOID_DATA);
		}
	}
	else
	{
		spawn parallel_for_find_low_density(current_OM, existing_array, start, middle);
		spawn parallel_for_find_low_density(current_OM, existing_array, middle+1, end);
		temp_array[middle] = spawn recursive_find_low_density_cilk(current_OM, existing_array[middle]->key, VOID_DATA, VOID_DATA);	//TODO: Make recursive_find_low_density_cilk
	}
}*/

/**\brief A parallel for loop to call relabel_tree
 *  \param current_OM     The OM to edit
 *  \param existing_array An array of existing nodes
 *  \param start          An interator to help with the parallel for loop (Pass in 0)
 *  \param end            An iterator to help with the parallel for loop (Pass in test_size)
 *  \sa relabel_tree(), batch_insert_node()
 */
/*cilk void parallel_for_relabel_tree(OM* current_OM, nodeOM** existing_array, int start, int end)
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn relabel_tree(current_OM, existing_array[start]);
		}
	}
	else
	{
		spawn parallel_for_relabel_tree(current_OM, existing_array, start, middle);
		spawn parallel_for_relabel_tree(current_OM, existing_array, middle+1, end);
		spawn relabel_tree(current_OM, existing_array[middle]);
	}
}*/

//TODO: relabel_tree function
/**\brief A function to allow concurrent relabeling
 *  \param current_OM    The OM to edit
 *  \param existing_node A node already in the data structure, used to help focus relabeling
 *  \sa parallel_for_relabel_tree()
 */
/*cilk void relabel_tree(OM* current_OM, nodeOM* existing_node)
{

}*/

/**\brief A parallel for loop to call insert_and_label()
 *  \param current_OM     The OM to edit
 *  \param existing_array An array of existing nodes
 *  \param insert_array An array of nodes to insert into the list and give labels
 *  \param start          An interator to help with the parallel for loop (Pass in 0)
 *  \param end            An iterator to help with the parallel for loop (Pass in test_size)
 *  \sa insert_and_label(), batch_insert_node()
 */
/*cilk void parallel_for_insert_and_label(OM* current_OM, nodeOM** existing_array, nodeOM** insert_array, int start, int end)
{
	int middle = start+(end-start)/2;
	
	if(end-start<=PARALLEL_CUTOFF)
	{
		for(start; start<end;++start)
		{
			spawn insert_and_label(current_OM, existing_array[start], insert_array[start]);
		}
	}
	else
	{
		spawn parallel_for_insert_and_label(current_OM, existing_array, insert_array, start, middle);
		spawn parallel_for_insert_and_label(current_OM, existing_array, insert_array, middle+1, end);
		spawn insert_and_label(current_OM, existing_array[middle], insert_array[middle]);
	}
}*/

/**\brief A function that inserts insert_node after existing_node in a linked list and gives it an average label
 *  \param current_OM    The OM to edit
 *  \param existing_node A node already in the list
 *  \param insert_node   A node to insert into the list
 *  \sa parallel_for_insert_and_label()
 */
/*cilk void insert_and_label(OM* current_OM, nodeOM* existing_node, nodeOM* insert_node)
{
	if(existing_node == NULL || insert_node == NULL)
	{
		printf("Error: Either existing node or insert node is NULL\n");
		return;
	}
	insert_node->next = existing_node->next;
	insert_node->next->prev = insert_node;
	insert_node->prev = existing_node;
	insert_node->prev->next = insert_node;
	
	if(existing_node == tree_maximum(current_OM->root))	//If insert item will be inserted last in the list
	{
		insert_node->key = floor((insert_node->prev->key + current_OM->label_space);
	}
	else
	{
		insert_node->key = floor((insert_node->prev->key + insert_node->next->key)/2);
	}
}*/


/**\brief A parallel for loop to call tree_insert_cilk()
 *  \param current_OM   The OM to insert into
 *  \param insert_array An array of nodes to insert - Non should ever be going to the same spot in the tree
 *  \param start         An interator to help with the parallel for loop (Pass in 0)
 *  \param end          An iterator to help with the parallel for loop (Pass in test_size)
 *  \sa batch_insert_node(), tree_insert_cilk()
 */
/*cilk void parallel_for_tree_insert(OM* current_OM, nodeOM** insert_array, int start, int end)
{
	int middle = start+(end-start)/2;
	if(end-start <= PARALLEL_CUTOFF)
	{
		spawn tree_insert_cilk(current_OM, insert_array[start]);
	}
	else
	{
		spawn parallel_for_tree_insert(current_OM, insert_array, start, middle);
		spawn parallel_for_tree_insert(current_OM, insert_array, middle+1,end);
		spawn tree_insert_cilk(current_OM, insert_array[middle]);
	}
}*/


/**\brief A function that uses a lock to allow one node to be inserted into the structure at a time
 *  \param current_OM    The OM to lock and edit
 *  \param existing_node A node already in the OM structure
 *  \param insert_node   A node to insert after existing node in the list
 *  \sa lock_insert(), recursive_find_low_density(), recursive_relabel_subtree()
 */
cilk void lock_insert_node(OM* current_OM, nodeOM* existing_node, nodeOM* insert_node)	//When tree already exists	//O(logn)
{
	nodeOM* temp_node;
	#ifdef USE_LOCKS
		Cilk_lock(current_OM->lock);
	#endif
	if(existing_node == NULL && current_OM->root == NULL && insert_node != NULL)
	{
		printf("Error: Tree has no existing root\n");
	}
	else if(insert_node == NULL) printf("Error: Insert_node is NULL\n");
	else																	//A normal insertion
	{
		//Relabel tree to create space
		temp_node = recursive_find_low_density(current_OM->root, existing_node->key, VOID_DATA, VOID_DATA);
		if(temp_node != NULL)
		{
			//printf("Relabel Parent Node: [%d](%d)\n", temp_node->key, temp_node->count);
			spawn recursive_relabel_subtree(current_OM, temp_node, VOID_DATA, VOID_DATA, VOID_DATA);
			sync;
			//printf("After Relabeling\n");
			//print_OM(current_OM);
			
		}
		
		//Insert into list
		insert_node->next = existing_node->next;
		insert_node->next->prev = insert_node;
		insert_node->prev = existing_node;
		insert_node->prev->next = insert_node;
		
			//Give label
		if(existing_node == tree_maximum(current_OM->root))
		{
			insert_node->key = floor((insert_node->prev->key + current_OM->label_space)/2);	//O(logn)	//If insert node is the last thing in the list
			//printf("Use maximum labeling method: %d\n", insert_node->key);
		}
		else 
		{
			insert_node->key = floor((insert_node->prev->key + insert_node->next->key)/2);
			//printf("Use average labeling method: %d\n", insert_node->key);
		}
		
		//Insert into tree
		tree_insert(current_OM, insert_node);
	}
	#ifdef USE_LOCKS
		Cilk_unlock(current_OM->lock);
	#endif
}


//THE WAY IM DOING THIS MAY NOT BE TECHNICALLY CORRECT, IM SEARCHING FROM THE TOP INSTEAD OF THE BOTTOM
	//Does it need a better threshold system?
/**\brief A function that searches from the top down to find nodes with low density
 *  \param current_node The root of the subtree to search down
 *  \param key          The key to direct the search towards
 *  \param min          The minumum value in the current subtree (Pass in VOID_DATA)
 *  \param max          The maximum value in the current subtree	(Pass in VOID_DATA)
 *  \return A nodeOM pointer to the parent of the first subtree found to have too high a density (Hypothetically the lowest node in the tree with low enough density to relabel)
 *  \sa recursive_relabel_subtree(), lock_insert_node()
 */
nodeOM* recursive_find_low_density(nodeOM* current_node, int key, int min, int max)	//Is this correct?	//O(logn)
{	//Start at root, find overall max and min, then work down from there recursively, return current_node->parent when current node doesnt work
		//Set max and min to VOID_DATA when calling
	nodeOM *min_node, *max_node;
	int threshold = 2;
	if(current_node == NULL)
	{
		printf("Error: Current_node is NULL\n");
		return NULL;
	}
	
	if(current_node->parent == NULL)	//If current node is the root, set initial max and mins
	{
		//printf("Set min and max\n");
		max_node = tree_maximum(current_node);
		min_node = tree_minimum(current_node);
		max = max_node->key;
		min = min_node->key;
	}
	//printf("Current_node->key = %d\n", current_node->key);
	if((max-min)/current_node->count > threshold)	//If density is low enough, call again to find first overflow
	{
		if(key > current_node->key) return recursive_find_low_density(current_node->right, key, current_node->key, max);
		else if(key < current_node->key) return recursive_find_low_density(current_node->left, key, min, current_node->key);
		else
		{
			//printf("Key equals current node, no high density found, returned NULL\n");
			return NULL;
		}
	}
	else											//Density is too high, return parent node	//NEED ROOT BASE CASE
	{
		//printf("OVERFLOW, return parent\n");
		if(current_node->parent == NULL) return current_node;
		else return current_node->parent;
	}
}

/**\brief A recursive function to relabel the nodes of the subree
 *  \param current_OM   Parameter_Description
 *  \param current_node Parameter_Description
 *  \param max          The maximum key a node in the subtree can be assigned (Pass in VOID_DATA)
 *  \param min          The minumum key a node in the subtree can be assigned (Pass in VOID_DATA)
 *  \param interval     An value calculated and reused in order to assign labels at equal intervals
 *  \sa recursive_find_low_density(), lock_insert_node()
 */
cilk void recursive_relabel_subtree(OM* current_OM, nodeOM* current_node, int max, int min, int interval) //O(logn)
{
	nodeOM *max_node, *min_node;
	if(current_node == current_OM->root)
	{
		//printf("Root Overflow\n");
		//print_OM(current_OM);
		current_OM->label_space*=2;
		max = current_OM->label_space;
		min = 0;
	}
	else
	{	
		if(max == VOID_DATA)
		{
			max_node = tree_maximum(current_node);
			max = max_node->key;
		}
		if(min == VOID_DATA)
		{		
			min_node = tree_minimum(current_node);
			min = min_node->key;
		}
	}
	if(interval == VOID_DATA)
	{	
		interval = floor((max-min)/current_node->count);
		max = max - interval;
		min = min - interval;
	}
	//printf("Max: %d\tMin: %d\n", max, min);
	//printf("Interval: %d\n", interval);
		
	if(current_node!=NULL)
	{
		//Relabel current node
		if(current_node->left == NULL)
		{
			current_node->key = min + interval;
			//printf("\tNew Key (leaf): %d\n", current_node->key);
		}
		else
		{
			current_node->key = min + interval + current_node->left->count * interval;
			//printf("\tNew Key: %d\n", current_node->key);
		}
		
		//Split down left and right children
		spawn recursive_relabel_subtree(current_OM, current_node->right, max, current_node->key, interval);
		spawn recursive_relabel_subtree(current_OM, current_node->left, current_node->key, min, interval);
		sync;
		return;
	}
	else return;	
}



//-----------Tree Functions---------------------------------
/**\brief Tree insert from Leiserson
 *  \param tree The OM to insert into
 *  \param z    A node to insert
 *  \sa tree_insert(), batch_insert_node()
 */
cilk void tree_insert_cilk(OM* tree, nodeOM* z)	//There will never be two nodes going to the same spot
{
	nodeOM* y = NULL;
	nodeOM* x = tree->root;
	while(x!=NULL)
	{
		y = x;
		//y->count++;		TODO: Find a way to edit counts without messing up in parallel
		if(z->key < x->key)
			x = x->left;
		else x = x->right;
	}
	z->parent = y;
	if(y == NULL)	//If the tree was empty, make z the root
	{
		tree->root = z;
	}
	else if(z->key < y->key)
	{
		y->left = z;
	}
	else y->right = z;	
}

/**\brief Tree insert from Leiserson
 *  \param tree The OM to insert into
 *  \param z    A node to insert
 *  \sa tree_delete(), recursive_tree_insert()
 */
void tree_insert(OM* tree, nodeOM* z)	//From leiserson
{
	nodeOM* y = NULL;
	nodeOM* x = tree->root;
	while(x!=NULL)
	{
		y = x;
		y->count++;
		if(z->key < x->key)
			x = x->left;
		else x = x->right;
	}
	z->parent = y;
	if(y == NULL)	//If the tree was empty, make z the root
	{
		tree->root = z;
	}
	else if(z->key < y->key)
	{
		y->left = z;
	}
	else y->right = z;
}

/**\brief Tree delete from Leiserson
 *  \param tree The tree to delete from
 *  \param z    The node to delete
 *  \sa tree_insert(), transplant()
 */
void tree_delete(OM* tree, nodeOM* z)
{
	nodeOM* y;
	if(z->left == NULL)
		transplant(tree, z, z->right);
	else if(z->right == NULL)
		transplant(tree, z, z->left);
	else 
	{
		y = tree_minimum(z->right);
		if(y->parent != z)
		{
			transplant(tree, y, y->right);
			y->right = z->right;
			y->right->parent = y;
		}
		transplant(tree, z, y);
		y->left = z->left;
		y->left->parent = y;
	}
}

/**\brief Transplant from Leiserson
 *  \param tree The OM to edit
 *  \param u    The node to remove
 *  \param v    The node to transplant
 *  \sa tree_delete()
 */
void transplant(OM* tree, nodeOM* u, nodeOM* v)	//Helper function for delete
{
	if(u->parent == NULL)
	{
		tree->root = v;
	}
	else if(u == u->parent->left)
	{
		u->parent->left = v;
	}
	else u->parent->right = v;
	if(v!=NULL)
		v->parent = u->parent;
}

/**\brief Find the minimum node in the subtree, from Leiserson
 *  \param x The root of the subtree to find the minumum of
 *  \return The minumum node in the subtree
 *  \sa tree_maximum()
 */
nodeOM* tree_minimum(nodeOM* x)
{
	while(x->left != NULL)
		x = x->left;
	return x;
}

/**\brief Find the maximum node in the subtree, from Leiserson
 *  \param x The root of the subtree to find the maximum of
 *  \return The maximum node in the subtree
 *  \sa tree_minimum()
 */
nodeOM* tree_maximum(nodeOM* x)
{
	while(x->right != NULL)
	{
		x = x->right;
	}
	return x;
}

/**\brief Print out the tree of the OM, The linked list, and the items in the layer of indirection
 *  \param tree The OM to print
 *  \sa print_sublist(), recursive_print_tree()
 */
void print_OM(OM* tree)
{
	int i;
	nodeOM* temp;
	printf("\nPrint Tree:\n");
	recursive_print_tree(tree, tree->root, 0);
	temp = tree_minimum(tree->root);
	printf("\nPrint Linked list:\n");
	for(i = 0; i< tree->root->count; ++i)
	{
		if(temp!=NULL)
		{
			//printf("%p\n",temp);
			print_sublist(temp);
			temp = temp->next;
		}
	}
	printf("\nCountOM: %d\n",tree->countOM);
}

/**\brief Print out a node's sublist (layer of indirection)
 *  \param current_node The node whose sublist is to be printed
 *  \sa print_OM(), print_sublist()
 */
void print_sublist(nodeOM* current_node)
{
	itemOM* temp = current_node->sublist;
	printf("[%d](%d)\t|> ", current_node->key, current_node->size);
	while(temp!=NULL)
	{
		if(temp->data != NULL)
			printf("[%d]<%d>\t", temp->key, *((int*)temp->data));
		else
			printf("[%d]<nil>\t", temp->key);
		temp = temp->next;
	}
	printf("\n\n");
}

/**\brief Recursively print out on OM's tree
 *  \param tree         The OM whose tree is to be printed
 *  \param current_node The root of the subtree being printed (pass in OM->root)
 *  \param depth        The depth of the node being printed (pass in 0)
 *  \sa print_sublist(), print_OM()
 */
void recursive_print_tree(OM* tree, nodeOM* current_node, int depth)
{
	int i;
	//if(depth > tree->root->count) return;
	if(current_node != NULL)
	{
		recursive_print_tree(tree, current_node->left, depth+1);
		
		for(i=0; i<depth; ++i) printf("\t");
		printf("[%d](%d)\n", current_node->key, current_node->count);
		
		recursive_print_tree(tree, current_node->right, depth+1);
	}
	return;
}



//-----------Initializations-------------------------------
/**\brief Initialize an item pair
 *  \param itemA 'A' in Insert(A,B)/Order(A,B)/Delete(A,B)
 *  \param itemB 'B' in Insert(A,B)/Order(A,B)/Delete(A,B)
 *  \return A pointer to the initialized item_pair
 */
item_pair* create_item_pair(itemOM* itemA, itemOM* itemB)
{
	item_pair* new_pair = malloc(sizeof(item_pair));
	if(new_pair == NULL) printf("Error Allocating Memeory\n");
	new_pair->itemA = itemA;
	new_pair->itemB = itemB;
	return new_pair;
}

/**\brief Initialize an itemOM
 *  \param data A pointer to the data that the item should store
 *  \return A pointer to the initiallized itemOM
 */
itemOM* create_itemOM(void* data)
{
	itemOM* new_item = malloc(sizeof(itemOM));
	if(new_item == NULL) printf("Error Allocating Memeory\n");
	new_item->key = VOID_DATA;
	new_item->next = NULL;
	new_item->prev = NULL;
	new_item->parent = NULL;
	new_item->data = data;
	return new_item;
}

/**\brief Initialize a nodeOM
 *  \return A pointer to the initiallized nodeOM
 */
nodeOM* create_nodeOM()
{
	nodeOM* new_node = malloc(sizeof(nodeOM));
	if(new_node == NULL) printf("Error Allocating Memeory\n");
	new_node->key = VOID_DATA;
	new_node->count = 1;
	new_node->size = 0;
	new_node->left = NULL;
	new_node->right = NULL;
	new_node->next = NULL;
	new_node->prev = NULL;
	new_node->parent = NULL;
	new_node->sublist = NULL;
	new_node->is_marked = false;
	#ifdef USE_LOCKS
	Cilk_lock_init(new_node->lock);
	#endif
	return new_node;
}

/**\brief Initialize an OM structure, including its tree, linked list, and layer of indirection
 *  \param array An array of items to initially be in the OM
 *  \param size  The size of the array
 *  \return A pointer the the initialized OM
 *  \sa recursive_create_tree()
 */
OM* create_OM(itemOM** array, int size)	//Sorted array	//Label space for sublist is countOM
{
	int i,j;
	int increment;
	int superlist_size;
	int sublist_size;
	int new_sublist_size;
	nodeOM** superlist;
	OM* new_OM = (OM*)malloc(sizeof(OM));
	if(new_OM == NULL) printf("Error Allocating Memeory\n");
	new_OM->label_space = STARTING_MAX_LABEL;
	new_OM->countOM = size;
	#ifdef USE_LOCKS
		Cilk_lock_init(new_OM->lock);
	#endif
	
	//Create nodeOMs
	//printf("\tCreate nodeOMs\n");
	
	//IMPORTANT:
	superlist_size = (int)ceil(size/log2(size));	//	n/log(n)
	sublist_size = floor(log2(size));				//	log(n)
	//printf("Superlist_size: %d\tSublist_size: %d\n", superlist_size, sublist_size);
	if(superlist_size*sublist_size > size)		//Rudimentary size check
	{
		//printf("Error: superlist/sublist size too large\n");
		superlist_size--;	//should still be less than (2n)/log(n)
	}
	
	superlist = malloc(sizeof(nodeOM*)*superlist_size);
		//Initialize Superlist
	for(i=0; i<superlist_size; i++)
	{
		superlist[i] = create_nodeOM();
	}
	//printf("\tSet up sublists\n");
	increment = (new_OM->countOM)/sublist_size;
	for(i=0; i<superlist_size-1; ++i)	//Set up the sublists for each superlist item
	{
		//printf("\t\ti: %d\n",i);
		superlist[i]->size = sublist_size;
		superlist[i]->sublist = array[i*sublist_size];
		for(j=0; j < sublist_size; ++j)	//COULD DEF BE PROBLEMS WITH THE MATH HERE
		{
			//printf("\t\t\tj: %d\n",j);
			array[i*sublist_size +j]->parent = superlist[i];	//Link parents
			if((i*sublist_size+j < size-1) && j != sublist_size-1)	//Link next; dont link between sublists or out of the array
				array[i*sublist_size +j]->next = array[i*sublist_size +j +1];
			else
				array[i*sublist_size +j]->next = NULL;	
			if((i*sublist_size+j > 0) && j != 0)	//Link prev; dont link between sublists or out of the array
				array[i*sublist_size +j]->prev = array[i*sublist_size +j -1];
			else
				array[i*sublist_size +j]->prev = NULL;
				
			array[i*sublist_size +j]->key = j*increment;	//Label all sublists the same
		}
	}
	//printf("\t\tLast item\n");
	for(i=superlist_size-1; i< (int)superlist_size; ++i)	//The last superlist item is different than the rest
	{
		//printf("\t\ti: %d\n",i);
		superlist[i]->sublist = array[i*sublist_size];
		//printf("%p\n",superlist[i]->sublist);
		new_sublist_size = (int)(size - ((superlist_size-1)*sublist_size));
		//printf("New_sublist_size: %d\n", new_sublist_size);
		if(sublist_size != 0) increment = (int)((new_OM->countOM)/sublist_size);
		else increment = 1;
		superlist[i]->size = new_sublist_size;
		for(j=0; j < new_sublist_size; ++j)	//COULD DEF BE PROBLEMS WITH THE MATH HERE
		{
			//printf("\t\t\tj: %d\n",j);
			array[i*sublist_size +j]->parent = superlist[i];	//Link parents
			if((i*sublist_size+j < size-1) && j != new_sublist_size-1)	//Link next; dont link between sublists or out of the array
				array[i*sublist_size +j]->next = array[i*sublist_size +j +1];
			else
				array[i*sublist_size +j]->next = NULL;
				
			if((i*sublist_size+j > 0) && j != 0)	//Link prev; dont link between sublists or out of the array
				array[i*sublist_size +j]->prev = array[i*sublist_size +j -1];
			else
				array[i*sublist_size +j]->prev = NULL;
				
			array[i*sublist_size +j]->key = j*increment;	//Label all sublists the same
		}
	}
		
	//Create tree and give labels
	//printf("\tCreate tree and give labels\n");
	recursive_create_tree(superlist, superlist_size, 0, STARTING_MAX_LABEL);
	new_OM->root = superlist[superlist_size/2];
	
	//Create linked list
	//printf("\tCreate linked list\n");
	if(superlist_size>1)
	{
		for(i=1;i<superlist_size-1;++i)
		{
			//printf("\t\ti: %d\n",i);
			superlist[i]->next = superlist[i+1];
			superlist[i]->next->prev = superlist[i];
			superlist[i]->prev = superlist[i-1];
			superlist[i]->prev->next= superlist[i];
		}
		superlist[0]->next = superlist[1];
		superlist[0]->next->prev = superlist[0];
		superlist[superlist_size-1]->next = superlist[0];
		superlist[superlist_size-1]->next->prev = superlist[superlist_size-1];
	}
	else if(superlist_size == 1)
	{
		superlist[0]->next = superlist[0];
		superlist[0]->prev = superlist[0];
	}
	else printf("Superlist_size must be 1 or greater\n");
	//printf("newOM created\n");
	return new_OM;
}

/**\brief Recursively link a tree given an array of nodes
 *  \param array An array of nodes to be in the tree
 *  \param size  The size of the array
 *  \param min   The minimum value a node in the subtree can be given
 *  \param max   The maximum value a node in the subtree can be given
 *  \return A pointer to the root of the subtree created
 *  \sa create_OM()
 */
nodeOM* recursive_create_tree(nodeOM** array, int size, int min, int max)
{
	nodeOM* current_node;
	if(size == 1)
	{
		//printf("\tSize == 1\n");
		current_node = array[0];
		if(current_node == NULL) printf("Current node is NULL\n");
		current_node->count = 1;
		current_node->key = (max+min)/2;
		return current_node;
	}
	else if(size < 1) return NULL;
	else
	{
		//printf("\t\tSize == %d\n", size);
		current_node = array[size/2];
		if(current_node == NULL) printf("Current node is NULL\n");
		current_node->count = size;
		current_node->key = (max+min)/2;
		
		//printf("recursive\n");
		if(size/2 >= 1)
			current_node->left = recursive_create_tree(array, size/2, min, current_node->key);
		if(size-(size/2) >= 1)
			current_node->right = recursive_create_tree(&array[(size/2)+1], size-1-(size/2), current_node->key, max);
		
		//printf("return\n");
		if(current_node == NULL) printf("Current node is NULL\n");
		if(current_node->left != NULL) current_node->left->parent = current_node;
		if(current_node->right != NULL) current_node->right->parent = current_node;
		return current_node;
	}
}





