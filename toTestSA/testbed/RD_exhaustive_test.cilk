#include <cilk-lib.cilkh>
#include <stdlib.h>
#include <stdio.h>

#define READ_ARG 	0
#define WRITE_ARG 	1

/**\fn rd_same_function_test
*\brief Tests the operations op1 and op2 in that order in the same cilk function. This should be a serial operation -- no races are expected.
*\param op1 either 0 to do a read first or 1 to do a write first
*\param op2 either 0 to do a read second or 1 to do a write second
*/
cilk void rd_same_function_test(const int op1, const int op2){

	
}



cilk int main(int argv, char* argc){
	/// Case 1:	
	/// This function tests each combination of read/write
	/// within the same spawned function. None of these should
	/// have any races within them, as they are all executed serially.
	spawn rd_same_function_test(READ_ARG, READ_ARG);
	spawn rd_same_function_test(READ_ARG, WRITE_ARG);
	spawn rd_same_function_test(WRITE_ARG, READ_ARG);
	spawn rd_same_function_test(WRITE_ARG, WRITE_ARG);

	/// Case 2:
	/// These functions tests each combination of read/write
	/// within a parent function and its child, in both the serial and
	/// parallel case.	
	spawn rd_same_function_test(READ_ARG, READ_ARG);
	spawn rd_same_function_test(READ_ARG, WRITE_ARG);
	spawn rd_same_function_test(WRITE_ARG, READ_ARG);
	spawn rd_same_function_test(WRITE_ARG, WRITE_ARG);

	/// Case 3:
	/// These functions test each combination of read/write
	/// within a parent function and its grandchildren and great grandchildren
	/// in both the serial and parallel case.
	spawn rd_same_function_test(READ_ARG, READ_ARG);
	spawn rd_same_function_test(READ_ARG, WRITE_ARG);
	spawn rd_same_function_test(WRITE_ARG, READ_ARG);
	spawn rd_same_function_test(WRITE_ARG, WRITE_ARG);
	
	
	/// Case 4:
	/// These functions test each combination of read/write
	/// within cousin nodes and sibling nodes
	/// in both the serial and parallel case.
	spawn rd_same_function_test(READ_ARG, READ_ARG);
	spawn rd_same_function_test(READ_ARG, WRITE_ARG);
	spawn rd_same_function_test(WRITE_ARG, READ_ARG);
	spawn rd_same_function_test(WRITE_ARG, WRITE_ARG);
	
	
	sync;	
	printf("Test completed fully as expected. No errors.\n");
	return;
}
