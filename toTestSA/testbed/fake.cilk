#include "util/defaults.h"

void usage() {
  printf("USAGE: fake [-nproc <total procs>] [-dsprob <ds steal prob>] "); 
  printf("[-w <wait loop length>] [-i <iterations>]\n");
}

cilk int main(int argc, char *argv[])
{
  int c;
  int dummy_wait=DUMMY_WAIT, dummy_iters=DUMMY_ITERS, base_size=BASE_SIZE;
  while (1) {
    static struct option long_options[] =
      {
	/* These options set a flag. */
	/* {"recursive",   no_argument,   &recursive_flag, 1}, */
	/* {"serial",      no_argument,   &recursive_flag, 0}, */
	{"wait",        required_argument, 0, 'w'},
	{"iterations",  required_argument, 0, 'i'},
	/* {"base",        required_argument, 0, 'b'}, */
	{0, 0, 0, 0}
      };
    /* getopt_long stores the option index here. */
    int option_index = 0;
    
    c = getopt_long (argc, argv, "w:i:b:",
		     long_options, &option_index);
    
    /* Detect the end of the options. */
    if (c == -1)
      break;
    
    switch (c) {
    case 0:
      /* If this option set a flag, do nothing else now. */
      if (long_options[option_index].flag != 0)
	break;
      printf ("option %s", long_options[option_index].name);
      if (optarg)
	printf (" with arg %s", optarg);
      printf ("\n");
      break;
    
    case 'w':
      printf ("option -w with value `%s'\n", optarg);
      dummy_wait = atoi(optarg);
      break;
    
    case 'i':
      printf ("option -i with value `%s'\n", optarg);
      dummy_iters = atoi(optarg);
      break;
  
    case 'b':
      printf ("option -b with value `%s'\n", optarg);
      base_size = atoi(optarg);
          
    case '?':
      /* getopt_long already printed an error message. */
      break;
    
    default:
      usage ();
    }
  }
    
  /* Print any remaining command line arguments (not options). */
  if (optind < argc) {
    printf ("non-option ARGV-elements: ");
    while (optind < argc) {
      printf ("%s ", argv[optind++]);
    }
    putchar ('\n');
  }
